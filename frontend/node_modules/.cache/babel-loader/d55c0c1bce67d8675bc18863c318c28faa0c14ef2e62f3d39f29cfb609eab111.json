{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HmacSha1 = exports.RsaSha512 = exports.RsaSha256 = exports.RsaSha1 = void 0;\nconst crypto = require(\"crypto\");\nconst types_1 = require(\"./types\");\nclass RsaSha1 {\n  constructor() {\n    this.getSignature = (0, types_1.createOptionalCallbackFunction)((signedInfo, privateKey) => {\n      const signer = crypto.createSign(\"RSA-SHA1\");\n      signer.update(signedInfo);\n      const res = signer.sign(privateKey, \"base64\");\n      return res;\n    });\n    this.verifySignature = (0, types_1.createOptionalCallbackFunction)((material, key, signatureValue) => {\n      const verifier = crypto.createVerify(\"RSA-SHA1\");\n      verifier.update(material);\n      const res = verifier.verify(key, signatureValue, \"base64\");\n      return res;\n    });\n    this.getAlgorithmName = () => {\n      return \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\";\n    };\n  }\n}\nexports.RsaSha1 = RsaSha1;\nclass RsaSha256 {\n  constructor() {\n    this.getSignature = (0, types_1.createOptionalCallbackFunction)((signedInfo, privateKey) => {\n      const signer = crypto.createSign(\"RSA-SHA256\");\n      signer.update(signedInfo);\n      const res = signer.sign(privateKey, \"base64\");\n      return res;\n    });\n    this.verifySignature = (0, types_1.createOptionalCallbackFunction)((material, key, signatureValue) => {\n      const verifier = crypto.createVerify(\"RSA-SHA256\");\n      verifier.update(material);\n      const res = verifier.verify(key, signatureValue, \"base64\");\n      return res;\n    });\n    this.getAlgorithmName = () => {\n      return \"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\";\n    };\n  }\n}\nexports.RsaSha256 = RsaSha256;\nclass RsaSha512 {\n  constructor() {\n    this.getSignature = (0, types_1.createOptionalCallbackFunction)((signedInfo, privateKey) => {\n      const signer = crypto.createSign(\"RSA-SHA512\");\n      signer.update(signedInfo);\n      const res = signer.sign(privateKey, \"base64\");\n      return res;\n    });\n    this.verifySignature = (0, types_1.createOptionalCallbackFunction)((material, key, signatureValue) => {\n      const verifier = crypto.createVerify(\"RSA-SHA512\");\n      verifier.update(material);\n      const res = verifier.verify(key, signatureValue, \"base64\");\n      return res;\n    });\n    this.getAlgorithmName = () => {\n      return \"http://www.w3.org/2001/04/xmldsig-more#rsa-sha512\";\n    };\n  }\n}\nexports.RsaSha512 = RsaSha512;\nclass HmacSha1 {\n  constructor() {\n    this.getSignature = (0, types_1.createOptionalCallbackFunction)((signedInfo, privateKey) => {\n      const signer = crypto.createHmac(\"SHA1\", privateKey);\n      signer.update(signedInfo);\n      const res = signer.digest(\"base64\");\n      return res;\n    });\n    this.verifySignature = (0, types_1.createOptionalCallbackFunction)((material, key, signatureValue) => {\n      const verifier = crypto.createHmac(\"SHA1\", key);\n      verifier.update(material);\n      const res = verifier.digest(\"base64\");\n      return res === signatureValue;\n    });\n    this.getAlgorithmName = () => {\n      return \"http://www.w3.org/2000/09/xmldsig#hmac-sha1\";\n    };\n  }\n}\nexports.HmacSha1 = HmacSha1;","map":{"version":3,"names":["crypto","require","types_1","RsaSha1","constructor","getSignature","createOptionalCallbackFunction","signedInfo","privateKey","signer","createSign","update","res","sign","verifySignature","material","key","signatureValue","verifier","createVerify","verify","getAlgorithmName","exports","RsaSha256","RsaSha512","HmacSha1","createHmac","digest"],"sources":["/Users/soukaina/Desktop/hotel-reservation-management-soap/frontend-soapt/node_modules/xml-crypto/src/signature-algorithms.ts"],"sourcesContent":["import * as crypto from \"crypto\";\nimport { type SignatureAlgorithm, createOptionalCallbackFunction } from \"./types\";\n\nexport class RsaSha1 implements SignatureAlgorithm {\n  getSignature = createOptionalCallbackFunction(\n    (signedInfo: crypto.BinaryLike, privateKey: crypto.KeyLike): string => {\n      const signer = crypto.createSign(\"RSA-SHA1\");\n      signer.update(signedInfo);\n      const res = signer.sign(privateKey, \"base64\");\n\n      return res;\n    },\n  );\n\n  verifySignature = createOptionalCallbackFunction(\n    (material: string, key: crypto.KeyLike, signatureValue: string): boolean => {\n      const verifier = crypto.createVerify(\"RSA-SHA1\");\n      verifier.update(material);\n      const res = verifier.verify(key, signatureValue, \"base64\");\n\n      return res;\n    },\n  );\n\n  getAlgorithmName = () => {\n    return \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\";\n  };\n}\n\nexport class RsaSha256 implements SignatureAlgorithm {\n  getSignature = createOptionalCallbackFunction(\n    (signedInfo: crypto.BinaryLike, privateKey: crypto.KeyLike): string => {\n      const signer = crypto.createSign(\"RSA-SHA256\");\n      signer.update(signedInfo);\n      const res = signer.sign(privateKey, \"base64\");\n\n      return res;\n    },\n  );\n\n  verifySignature = createOptionalCallbackFunction(\n    (material: string, key: crypto.KeyLike, signatureValue: string): boolean => {\n      const verifier = crypto.createVerify(\"RSA-SHA256\");\n      verifier.update(material);\n      const res = verifier.verify(key, signatureValue, \"base64\");\n\n      return res;\n    },\n  );\n\n  getAlgorithmName = () => {\n    return \"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\";\n  };\n}\n\nexport class RsaSha512 implements SignatureAlgorithm {\n  getSignature = createOptionalCallbackFunction(\n    (signedInfo: crypto.BinaryLike, privateKey: crypto.KeyLike): string => {\n      const signer = crypto.createSign(\"RSA-SHA512\");\n      signer.update(signedInfo);\n      const res = signer.sign(privateKey, \"base64\");\n\n      return res;\n    },\n  );\n\n  verifySignature = createOptionalCallbackFunction(\n    (material: string, key: crypto.KeyLike, signatureValue: string): boolean => {\n      const verifier = crypto.createVerify(\"RSA-SHA512\");\n      verifier.update(material);\n      const res = verifier.verify(key, signatureValue, \"base64\");\n\n      return res;\n    },\n  );\n\n  getAlgorithmName = () => {\n    return \"http://www.w3.org/2001/04/xmldsig-more#rsa-sha512\";\n  };\n}\n\nexport class HmacSha1 implements SignatureAlgorithm {\n  getSignature = createOptionalCallbackFunction(\n    (signedInfo: crypto.BinaryLike, privateKey: crypto.KeyLike): string => {\n      const signer = crypto.createHmac(\"SHA1\", privateKey);\n      signer.update(signedInfo);\n      const res = signer.digest(\"base64\");\n\n      return res;\n    },\n  );\n\n  verifySignature = createOptionalCallbackFunction(\n    (material: string, key: crypto.KeyLike, signatureValue: string): boolean => {\n      const verifier = crypto.createHmac(\"SHA1\", key);\n      verifier.update(material);\n      const res = verifier.digest(\"base64\");\n\n      return res === signatureValue;\n    },\n  );\n\n  getAlgorithmName = () => {\n    return \"http://www.w3.org/2000/09/xmldsig#hmac-sha1\";\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}