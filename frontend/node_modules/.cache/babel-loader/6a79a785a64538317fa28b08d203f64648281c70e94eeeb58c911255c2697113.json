{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.wsdlCacheSingleton = exports.parseMTOMResp = exports.xmlEscape = exports.splitQName = exports.findPrefix = exports.TNS_PREFIX = exports.passwordDigest = void 0;\nconst crypto = require(\"crypto\");\nfunction passwordDigest(nonce, created, password) {\n  // digest = base64 ( sha1 ( nonce + created + password ) )\n  const pwHash = crypto.createHash('sha1');\n  const NonceBytes = Buffer.from(nonce || '', 'base64');\n  const CreatedBytes = Buffer.from(created || '', 'utf8');\n  const PasswordBytes = Buffer.from(password || '', 'utf8');\n  const FullBytes = Buffer.concat([NonceBytes, CreatedBytes, PasswordBytes]);\n  pwHash.update(FullBytes);\n  return pwHash.digest('base64');\n}\nexports.passwordDigest = passwordDigest;\nexports.TNS_PREFIX = '__tns__'; // Prefix for targetNamespace\n/**\n * Find a key from an object based on the value\n * @param {Object} Namespace prefix/uri mapping\n * @param {*} nsURI value\n * @returns {String} The matching key\n */\nfunction findPrefix(xmlnsMapping, nsURI) {\n  for (const n in xmlnsMapping) {\n    if (n === exports.TNS_PREFIX) {\n      continue;\n    }\n    if (xmlnsMapping[n] === nsURI) {\n      return n;\n    }\n  }\n}\nexports.findPrefix = findPrefix;\nfunction splitQName(nsName) {\n  if (typeof nsName !== 'string') {\n    return {\n      prefix: exports.TNS_PREFIX,\n      name: nsName\n    };\n  }\n  const [topLevelName] = nsName.split('|', 1);\n  const prefixOffset = topLevelName.indexOf(':');\n  return {\n    prefix: topLevelName.substring(0, prefixOffset) || exports.TNS_PREFIX,\n    name: topLevelName.substring(prefixOffset + 1)\n  };\n}\nexports.splitQName = splitQName;\nfunction xmlEscape(obj) {\n  if (typeof obj === 'string') {\n    if (obj.substr(0, 9) === '<![CDATA[' && obj.substr(-3) === ']]>') {\n      return obj;\n    }\n    return obj.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&apos;');\n  }\n  return obj;\n}\nexports.xmlEscape = xmlEscape;\nfunction parseMTOMResp(payload, boundary, callback) {\n  return import('formidable').then(({\n    MultipartParser\n  }) => {\n    const resp = {\n      parts: []\n    };\n    let headerName = '';\n    let headerValue = '';\n    let data;\n    let partIndex = 0;\n    const parser = new MultipartParser();\n    parser.initWithBoundary(boundary);\n    parser.on('data', ({\n      name,\n      buffer,\n      start,\n      end\n    }) => {\n      switch (name) {\n        case 'partBegin':\n          resp.parts[partIndex] = {\n            body: null,\n            headers: {}\n          };\n          data = Buffer.from('');\n          break;\n        case 'headerField':\n          headerName = buffer.slice(start, end).toString();\n          break;\n        case 'headerValue':\n          headerValue = buffer.slice(start, end).toString();\n          break;\n        case 'headerEnd':\n          resp.parts[partIndex].headers[headerName.toLowerCase()] = headerValue;\n          break;\n        case 'partData':\n          data = Buffer.concat([data, buffer.slice(start, end)]);\n          break;\n        case 'partEnd':\n          resp.parts[partIndex].body = data;\n          partIndex++;\n          break;\n      }\n    });\n    parser.write(payload);\n    return callback(null, resp);\n  }).catch(callback);\n}\nexports.parseMTOMResp = parseMTOMResp;\nclass DefaultWSDLCache {\n  constructor() {\n    this.cache = {};\n  }\n  has(key) {\n    return !!this.cache[key];\n  }\n  get(key) {\n    return this.cache[key];\n  }\n  set(key, wsdl) {\n    this.cache[key] = wsdl;\n  }\n  clear() {\n    this.cache = {};\n  }\n}\nexports.wsdlCacheSingleton = new DefaultWSDLCache();","map":{"version":3,"names":["crypto","require","passwordDigest","nonce","created","password","pwHash","createHash","NonceBytes","Buffer","from","CreatedBytes","PasswordBytes","FullBytes","concat","update","digest","exports","TNS_PREFIX","findPrefix","xmlnsMapping","nsURI","n","splitQName","nsName","prefix","name","topLevelName","split","prefixOffset","indexOf","substring","xmlEscape","obj","substr","replace","parseMTOMResp","payload","boundary","callback","then","MultipartParser","resp","parts","headerName","headerValue","data","partIndex","parser","initWithBoundary","on","buffer","start","end","body","headers","slice","toString","toLowerCase","write","catch","DefaultWSDLCache","constructor","cache","has","key","get","set","wsdl","clear","wsdlCacheSingleton"],"sources":["../src/utils.ts"],"sourcesContent":[null],"mappings":";;;;;;AACA,MAAAA,MAAA,GAAAC,OAAA;AAIA,SAAgBC,cAAcA,CAACC,KAAa,EAAEC,OAAe,EAAEC,QAAgB;EAC7E;EACA,MAAMC,MAAM,GAAGN,MAAM,CAACO,UAAU,CAAC,MAAM,CAAC;EAExC,MAAMC,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACP,KAAK,IAAI,EAAE,EAAE,QAAQ,CAAC;EACrD,MAAMQ,YAAY,GAAGF,MAAM,CAACC,IAAI,CAACN,OAAO,IAAI,EAAE,EAAE,MAAM,CAAC;EACvD,MAAMQ,aAAa,GAAGH,MAAM,CAACC,IAAI,CAACL,QAAQ,IAAI,EAAE,EAAE,MAAM,CAAC;EACzD,MAAMQ,SAAS,GAAGJ,MAAM,CAACK,MAAM,CAAC,CAACN,UAAU,EAAEG,YAAY,EAAEC,aAAa,CAAC,CAAC;EAE1EN,MAAM,CAACS,MAAM,CAACF,SAAS,CAAC;EACxB,OAAOP,MAAM,CAACU,MAAM,CAAC,QAAQ,CAAC;AAChC;AAXAC,OAAA,CAAAf,cAAA,GAAAA,cAAA;AAaae,OAAA,CAAAC,UAAU,GAAG,SAAS,CAAC,CAAC;AAErC;;;;;;AAMA,SAAgBC,UAAUA,CAACC,YAAY,EAAEC,KAAK;EAC5C,KAAK,MAAMC,CAAC,IAAIF,YAAY,EAAE;IAC5B,IAAIE,CAAC,KAAKL,OAAA,CAAAC,UAAU,EAAE;MAAE;;IACxB,IAAIE,YAAY,CAACE,CAAC,CAAC,KAAKD,KAAK,EAAE;MAC7B,OAAOC,CAAC;;;AAGd;AAPAL,OAAA,CAAAE,UAAA,GAAAA,UAAA;AASA,SAAgBI,UAAUA,CAAIC,MAAS;EACrC,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC9B,OAAO;MACLC,MAAM,EAAER,OAAA,CAAAC,UAAU;MAClBQ,IAAI,EAAEF;KACP;;EAGH,MAAM,CAACG,YAAY,CAAC,GAAGH,MAAM,CAACI,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;EAE3C,MAAMC,YAAY,GAAGF,YAAY,CAACG,OAAO,CAAC,GAAG,CAAC;EAE9C,OAAO;IACLL,MAAM,EAAEE,YAAY,CAACI,SAAS,CAAC,CAAC,EAAEF,YAAY,CAAC,IAAIZ,OAAA,CAAAC,UAAU;IAC7DQ,IAAI,EAAEC,YAAY,CAACI,SAAS,CAACF,YAAY,GAAG,CAAC;GAC9C;AACH;AAhBAZ,OAAA,CAAAM,UAAA,GAAAA,UAAA;AAkBA,SAAgBS,SAASA,CAACC,GAAG;EAC3B,IAAI,OAAQA,GAAI,KAAK,QAAQ,EAAE;IAC7B,IAAIA,GAAG,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,WAAW,IAAID,GAAG,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE;MAChE,OAAOD,GAAG;;IAEZ,OAAOA,GAAG,CACPE,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CACtBA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrBA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrBA,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CACvBA,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC;;EAG5B,OAAOF,GAAG;AACZ;AAdAhB,OAAA,CAAAe,SAAA,GAAAA,SAAA;AAgBA,SAAgBI,aAAaA,CAACC,OAAe,EAAEC,QAAgB,EAAEC,QAAwD;EACvH,OAAO,MAAM,CAAC,YAAY,CAAC,CACxBC,IAAI,CAAC,CAAC;IAAEC;EAAe,CAAE,KAAI;IAC5B,MAAMC,IAAI,GAAqB;MAC7BC,KAAK,EAAE;KACR;IACD,IAAIC,UAAU,GAAG,EAAE;IACnB,IAAIC,WAAW,GAAG,EAAE;IACpB,IAAIC,IAAY;IAChB,IAAIC,SAAS,GAAG,CAAC;IACjB,MAAMC,MAAM,GAAG,IAAIP,eAAe,EAAE;IAEpCO,MAAM,CAACC,gBAAgB,CAACX,QAAQ,CAAC;IACjCU,MAAM,CAACE,EAAE,CAAC,MAAM,EAAE,CAAC;MAAExB,IAAI;MAAEyB,MAAM;MAAEC,KAAK;MAAEC;IAAG,CAAE,KAAI;MACjD,QAAQ3B,IAAI;QACV,KAAK,WAAW;UACdgB,IAAI,CAACC,KAAK,CAACI,SAAS,CAAC,GAAG;YACtBO,IAAI,EAAE,IAAI;YACVC,OAAO,EAAE;WACV;UACDT,IAAI,GAAGrC,MAAM,CAACC,IAAI,CAAC,EAAE,CAAC;UACtB;QACF,KAAK,aAAa;UAChBkC,UAAU,GAAGO,MAAM,CAACK,KAAK,CAACJ,KAAK,EAAEC,GAAG,CAAC,CAACI,QAAQ,EAAE;UAChD;QACF,KAAK,aAAa;UAChBZ,WAAW,GAAGM,MAAM,CAACK,KAAK,CAACJ,KAAK,EAAEC,GAAG,CAAC,CAACI,QAAQ,EAAE;UACjD;QACF,KAAK,WAAW;UACdf,IAAI,CAACC,KAAK,CAACI,SAAS,CAAC,CAACQ,OAAO,CAACX,UAAU,CAACc,WAAW,EAAE,CAAC,GAAGb,WAAW;UACrE;QACF,KAAK,UAAU;UACbC,IAAI,GAAGrC,MAAM,CAACK,MAAM,CAAC,CAACgC,IAAI,EAAEK,MAAM,CAACK,KAAK,CAACJ,KAAK,EAAEC,GAAG,CAAC,CAAC,CAAC;UACtD;QACF,KAAK,SAAS;UACZX,IAAI,CAACC,KAAK,CAACI,SAAS,CAAC,CAACO,IAAI,GAAGR,IAAI;UACjCC,SAAS,EAAE;UACX;;IAEN,CAAC,CAAC;IAEFC,MAAM,CAACW,KAAK,CAACtB,OAAO,CAAC;IAErB,OAAOE,QAAQ,CAAC,IAAI,EAAEG,IAAI,CAAC;EAC7B,CAAC,CAAC,CACDkB,KAAK,CAACrB,QAAQ,CAAC;AACpB;AA9CAtB,OAAA,CAAAmB,aAAA,GAAAA,aAAA;AAgDA,MAAMyB,gBAAgB;EAIpBC,YAAA;IACE,IAAI,CAACC,KAAK,GAAG,EAAE;EACjB;EAEOC,GAAGA,CAACC,GAAW;IACpB,OAAO,CAAC,CAAC,IAAI,CAACF,KAAK,CAACE,GAAG,CAAC;EAC1B;EAEOC,GAAGA,CAACD,GAAW;IACpB,OAAO,IAAI,CAACF,KAAK,CAACE,GAAG,CAAC;EACxB;EAEOE,GAAGA,CAACF,GAAW,EAAEG,IAAU;IAChC,IAAI,CAACL,KAAK,CAACE,GAAG,CAAC,GAAGG,IAAI;EACxB;EAEOC,KAAKA,CAAA;IACV,IAAI,CAACN,KAAK,GAAG,EAAE;EACjB;;AAEW9C,OAAA,CAAAqD,kBAAkB,GAAG,IAAIT,gBAAgB,EAAE","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}