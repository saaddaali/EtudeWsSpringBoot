{"ast":null,"code":"/* eslint-disable no-underscore-dangle */\n\nimport JSONParser from '../parsers/JSON.js';\nexport const jsonType = 'json';\n// the `options` is also available through the `this.options` / `formidable.options`\nexport default function plugin(formidable, options) {\n  // the `this` context is always formidable, as the first argument of a plugin\n  // but this allows us to customize/test each plugin\n\n  /* istanbul ignore next */\n  const self = this || formidable;\n  if (/json/i.test(self.headers['content-type'])) {\n    init.call(self, self, options);\n  }\n  return self;\n}\n;\n\n// Note that it's a good practice (but it's up to you) to use the `this.options` instead\n// of the passed `options` (second) param, because when you decide\n// to test the plugin you can pass custom `this` context to it (and so `this.options`)\nfunction init(_self, _opts) {\n  this.type = jsonType;\n  const parser = new JSONParser(this.options);\n  parser.on('data', fields => {\n    this.fields = fields;\n  });\n  parser.once('end', () => {\n    this.ended = true;\n    this._maybeEnd();\n  });\n  this._parser = parser;\n}","map":{"version":3,"names":["JSONParser","jsonType","plugin","formidable","options","self","test","headers","init","call","_self","_opts","type","parser","on","fields","once","ended","_maybeEnd","_parser"],"sources":["/Users/soukaina/Desktop/hotel-reservation-management-soap/frontend-soapt/node_modules/formidable/src/plugins/json.js"],"sourcesContent":["/* eslint-disable no-underscore-dangle */\n\nimport JSONParser from '../parsers/JSON.js';\n\nexport const jsonType = 'json';\n// the `options` is also available through the `this.options` / `formidable.options`\nexport default function plugin(formidable, options) {\n  // the `this` context is always formidable, as the first argument of a plugin\n  // but this allows us to customize/test each plugin\n\n  /* istanbul ignore next */\n  const self = this || formidable;\n\n  if (/json/i.test(self.headers['content-type'])) {\n    init.call(self, self, options);\n  }\n\n  return self;\n};\n\n// Note that it's a good practice (but it's up to you) to use the `this.options` instead\n// of the passed `options` (second) param, because when you decide\n// to test the plugin you can pass custom `this` context to it (and so `this.options`)\nfunction init(_self, _opts) {\n  this.type = jsonType;\n\n  const parser = new JSONParser(this.options);\n\n  parser.on('data', (fields) => {\n    this.fields = fields;\n  });\n\n  parser.once('end', () => {\n    this.ended = true;\n    this._maybeEnd();\n  });\n\n  this._parser = parser;\n}\n"],"mappings":"AAAA;;AAEA,OAAOA,UAAU,MAAM,oBAAoB;AAE3C,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAC9B;AACA,eAAe,SAASC,MAAMA,CAACC,UAAU,EAAEC,OAAO,EAAE;EAClD;EACA;;EAEA;EACA,MAAMC,IAAI,GAAG,IAAI,IAAIF,UAAU;EAE/B,IAAI,OAAO,CAACG,IAAI,CAACD,IAAI,CAACE,OAAO,CAAC,cAAc,CAAC,CAAC,EAAE;IAC9CC,IAAI,CAACC,IAAI,CAACJ,IAAI,EAAEA,IAAI,EAAED,OAAO,CAAC;EAChC;EAEA,OAAOC,IAAI;AACb;AAAC;;AAED;AACA;AACA;AACA,SAASG,IAAIA,CAACE,KAAK,EAAEC,KAAK,EAAE;EAC1B,IAAI,CAACC,IAAI,GAAGX,QAAQ;EAEpB,MAAMY,MAAM,GAAG,IAAIb,UAAU,CAAC,IAAI,CAACI,OAAO,CAAC;EAE3CS,MAAM,CAACC,EAAE,CAAC,MAAM,EAAGC,MAAM,IAAK;IAC5B,IAAI,CAACA,MAAM,GAAGA,MAAM;EACtB,CAAC,CAAC;EAEFF,MAAM,CAACG,IAAI,CAAC,KAAK,EAAE,MAAM;IACvB,IAAI,CAACC,KAAK,GAAG,IAAI;IACjB,IAAI,CAACC,SAAS,CAAC,CAAC;EAClB,CAAC,CAAC;EAEF,IAAI,CAACC,OAAO,GAAGN,MAAM;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}