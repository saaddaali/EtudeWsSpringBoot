{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { reservationService } from \"../services/reservationService\";\nexport const useReservation = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    clientName: \"\",\n    email: \"\",\n    phone: \"\",\n    roomType: \"simple\",\n    startDate: \"\",\n    endDate: \"\",\n    preferences: \"\",\n    amenities: []\n  });\n\n  // Ajout des états pour gérer le chargement et les erreurs\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [reservations, setReservations] = useState([]);\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  // Charger toutes les réservations\n  const loadReservations = async () => {\n    try {\n      setLoading(true);\n      const data = await reservationService.getReservations();\n      setReservations(data);\n      setError(null);\n    } catch (error) {\n      setError(\"Erreur lors du chargement des réservations\");\n      console.error(\"Erreur:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Créer une nouvelle réservation\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      setLoading(true);\n      await reservationService.createReservation(formData);\n      // Réinitialiser le formulaire après succès\n      setFormData({\n        clientName: \"\",\n        email: \"\",\n        phone: \"\",\n        roomType: \"simple\",\n        startDate: \"\",\n        endDate: \"\",\n        preferences: \"\",\n        amenities: []\n      });\n      // Recharger la liste des réservations\n      await loadReservations();\n      setError(null);\n    } catch (error) {\n      setError(\"Erreur lors de la création de la réservation\");\n      console.error(\"Erreur:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Supprimer une réservation\n  const deleteReservation = async id => {\n    try {\n      setLoading(true);\n      await reservationService.deleteReservation(id);\n      // Recharger la liste après suppression\n      await loadReservations();\n      setError(null);\n    } catch (error) {\n      setError(\"Erreur lors de la suppression de la réservation\");\n      console.error(\"Erreur:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Mettre à jour une réservation\n  const updateReservation = async (id, updatedData) => {\n    try {\n      setLoading(true);\n      await reservationService.updateReservation(id, updatedData);\n      // Recharger la liste après mise à jour\n      await loadReservations();\n      setError(null);\n    } catch (error) {\n      setError(\"Erreur lors de la mise à jour de la réservation\");\n      console.error(\"Erreur:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    formData,\n    handleInputChange,\n    handleSubmit,\n    loading,\n    error,\n    reservations,\n    loadReservations,\n    deleteReservation,\n    updateReservation\n  };\n};\n_s(useReservation, \"UeaKBHaWBn67EoqmSfXDznhtnWw=\");","map":{"version":3,"names":["useState","reservationService","useReservation","_s","formData","setFormData","clientName","email","phone","roomType","startDate","endDate","preferences","amenities","loading","setLoading","error","setError","reservations","setReservations","handleInputChange","e","name","value","target","prev","loadReservations","data","getReservations","console","handleSubmit","preventDefault","createReservation","deleteReservation","id","updateReservation","updatedData"],"sources":["/Users/soukaina/Desktop/hotel-reservation-management-rest/frontend/src/hooks/useReservation.js"],"sourcesContent":["import { useState } from \"react\";\nimport { reservationService } from \"../services/reservationService\";\n\nexport const useReservation = () => {\n  const [formData, setFormData] = useState({\n    clientName: \"\",\n    email: \"\",\n    phone: \"\",\n    roomType: \"simple\",\n    startDate: \"\",\n    endDate: \"\",\n    preferences: \"\",\n    amenities: [],\n  });\n\n  // Ajout des états pour gérer le chargement et les erreurs\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [reservations, setReservations] = useState([]);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  // Charger toutes les réservations\n  const loadReservations = async () => {\n    try {\n      setLoading(true);\n      const data = await reservationService.getReservations();\n      setReservations(data);\n      setError(null);\n    } catch (error) {\n      setError(\"Erreur lors du chargement des réservations\");\n      console.error(\"Erreur:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Créer une nouvelle réservation\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      setLoading(true);\n      await reservationService.createReservation(formData);\n      // Réinitialiser le formulaire après succès\n      setFormData({\n        clientName: \"\",\n        email: \"\",\n        phone: \"\",\n        roomType: \"simple\",\n        startDate: \"\",\n        endDate: \"\",\n        preferences: \"\",\n        amenities: [],\n      });\n      // Recharger la liste des réservations\n      await loadReservations();\n      setError(null);\n    } catch (error) {\n      setError(\"Erreur lors de la création de la réservation\");\n      console.error(\"Erreur:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Supprimer une réservation\n  const deleteReservation = async (id) => {\n    try {\n      setLoading(true);\n      await reservationService.deleteReservation(id);\n      // Recharger la liste après suppression\n      await loadReservations();\n      setError(null);\n    } catch (error) {\n      setError(\"Erreur lors de la suppression de la réservation\");\n      console.error(\"Erreur:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Mettre à jour une réservation\n  const updateReservation = async (id, updatedData) => {\n    try {\n      setLoading(true);\n      await reservationService.updateReservation(id, updatedData);\n      // Recharger la liste après mise à jour\n      await loadReservations();\n      setError(null);\n    } catch (error) {\n      setError(\"Erreur lors de la mise à jour de la réservation\");\n      console.error(\"Erreur:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    formData,\n    handleInputChange,\n    handleSubmit,\n    loading,\n    error,\n    reservations,\n    loadReservations,\n    deleteReservation,\n    updateReservation,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}