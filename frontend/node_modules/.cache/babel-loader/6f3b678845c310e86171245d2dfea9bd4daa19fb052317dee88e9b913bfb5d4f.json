{"ast":null,"code":"\"use strict\";\n\nconst {\n  asciiLowercase,\n  solelyContainsHTTPTokenCodePoints,\n  soleyContainsHTTPQuotedStringTokenCodePoints\n} = require(\"./utils.js\");\nmodule.exports = class MIMETypeParameters {\n  constructor(map) {\n    this._map = map;\n  }\n  get size() {\n    return this._map.size;\n  }\n  get(name) {\n    name = asciiLowercase(String(name));\n    return this._map.get(name);\n  }\n  has(name) {\n    name = asciiLowercase(String(name));\n    return this._map.has(name);\n  }\n  set(name, value) {\n    name = asciiLowercase(String(name));\n    value = String(value);\n    if (!solelyContainsHTTPTokenCodePoints(name)) {\n      throw new Error(`Invalid MIME type parameter name \"${name}\": only HTTP token code points are valid.`);\n    }\n    if (!soleyContainsHTTPQuotedStringTokenCodePoints(value)) {\n      throw new Error(`Invalid MIME type parameter value \"${value}\": only HTTP quoted-string token code points are ` + `valid.`);\n    }\n    return this._map.set(name, value);\n  }\n  clear() {\n    this._map.clear();\n  }\n  delete(name) {\n    name = asciiLowercase(String(name));\n    return this._map.delete(name);\n  }\n  forEach(callbackFn, thisArg) {\n    this._map.forEach(callbackFn, thisArg);\n  }\n  keys() {\n    return this._map.keys();\n  }\n  values() {\n    return this._map.values();\n  }\n  entries() {\n    return this._map.entries();\n  }\n  [Symbol.iterator]() {\n    return this._map[Symbol.iterator]();\n  }\n};","map":{"version":3,"names":["asciiLowercase","solelyContainsHTTPTokenCodePoints","soleyContainsHTTPQuotedStringTokenCodePoints","require","module","exports","MIMETypeParameters","constructor","map","_map","size","get","name","String","has","set","value","Error","clear","delete","forEach","callbackFn","thisArg","keys","values","entries","Symbol","iterator"],"sources":["/Users/soukaina/Desktop/hotel-reservation-management-soap/frontend-soapt/node_modules/soap/node_modules/whatwg-mimetype/lib/mime-type-parameters.js"],"sourcesContent":["\"use strict\";\nconst {\n  asciiLowercase,\n  solelyContainsHTTPTokenCodePoints,\n  soleyContainsHTTPQuotedStringTokenCodePoints\n} = require(\"./utils.js\");\n\nmodule.exports = class MIMETypeParameters {\n  constructor(map) {\n    this._map = map;\n  }\n\n  get size() {\n    return this._map.size;\n  }\n\n  get(name) {\n    name = asciiLowercase(String(name));\n    return this._map.get(name);\n  }\n\n  has(name) {\n    name = asciiLowercase(String(name));\n    return this._map.has(name);\n  }\n\n  set(name, value) {\n    name = asciiLowercase(String(name));\n    value = String(value);\n\n    if (!solelyContainsHTTPTokenCodePoints(name)) {\n      throw new Error(`Invalid MIME type parameter name \"${name}\": only HTTP token code points are valid.`);\n    }\n    if (!soleyContainsHTTPQuotedStringTokenCodePoints(value)) {\n      throw new Error(`Invalid MIME type parameter value \"${value}\": only HTTP quoted-string token code points are ` +\n                      `valid.`);\n    }\n\n    return this._map.set(name, value);\n  }\n\n  clear() {\n    this._map.clear();\n  }\n\n  delete(name) {\n    name = asciiLowercase(String(name));\n    return this._map.delete(name);\n  }\n\n  forEach(callbackFn, thisArg) {\n    this._map.forEach(callbackFn, thisArg);\n  }\n\n  keys() {\n    return this._map.keys();\n  }\n\n  values() {\n    return this._map.values();\n  }\n\n  entries() {\n    return this._map.entries();\n  }\n\n  [Symbol.iterator]() {\n    return this._map[Symbol.iterator]();\n  }\n};\n"],"mappings":"AAAA,YAAY;;AACZ,MAAM;EACJA,cAAc;EACdC,iCAAiC;EACjCC;AACF,CAAC,GAAGC,OAAO,CAAC,YAAY,CAAC;AAEzBC,MAAM,CAACC,OAAO,GAAG,MAAMC,kBAAkB,CAAC;EACxCC,WAAWA,CAACC,GAAG,EAAE;IACf,IAAI,CAACC,IAAI,GAAGD,GAAG;EACjB;EAEA,IAAIE,IAAIA,CAAA,EAAG;IACT,OAAO,IAAI,CAACD,IAAI,CAACC,IAAI;EACvB;EAEAC,GAAGA,CAACC,IAAI,EAAE;IACRA,IAAI,GAAGZ,cAAc,CAACa,MAAM,CAACD,IAAI,CAAC,CAAC;IACnC,OAAO,IAAI,CAACH,IAAI,CAACE,GAAG,CAACC,IAAI,CAAC;EAC5B;EAEAE,GAAGA,CAACF,IAAI,EAAE;IACRA,IAAI,GAAGZ,cAAc,CAACa,MAAM,CAACD,IAAI,CAAC,CAAC;IACnC,OAAO,IAAI,CAACH,IAAI,CAACK,GAAG,CAACF,IAAI,CAAC;EAC5B;EAEAG,GAAGA,CAACH,IAAI,EAAEI,KAAK,EAAE;IACfJ,IAAI,GAAGZ,cAAc,CAACa,MAAM,CAACD,IAAI,CAAC,CAAC;IACnCI,KAAK,GAAGH,MAAM,CAACG,KAAK,CAAC;IAErB,IAAI,CAACf,iCAAiC,CAACW,IAAI,CAAC,EAAE;MAC5C,MAAM,IAAIK,KAAK,CAAC,qCAAqCL,IAAI,2CAA2C,CAAC;IACvG;IACA,IAAI,CAACV,4CAA4C,CAACc,KAAK,CAAC,EAAE;MACxD,MAAM,IAAIC,KAAK,CAAC,sCAAsCD,KAAK,mDAAmD,GAC9F,QAAQ,CAAC;IAC3B;IAEA,OAAO,IAAI,CAACP,IAAI,CAACM,GAAG,CAACH,IAAI,EAAEI,KAAK,CAAC;EACnC;EAEAE,KAAKA,CAAA,EAAG;IACN,IAAI,CAACT,IAAI,CAACS,KAAK,CAAC,CAAC;EACnB;EAEAC,MAAMA,CAACP,IAAI,EAAE;IACXA,IAAI,GAAGZ,cAAc,CAACa,MAAM,CAACD,IAAI,CAAC,CAAC;IACnC,OAAO,IAAI,CAACH,IAAI,CAACU,MAAM,CAACP,IAAI,CAAC;EAC/B;EAEAQ,OAAOA,CAACC,UAAU,EAAEC,OAAO,EAAE;IAC3B,IAAI,CAACb,IAAI,CAACW,OAAO,CAACC,UAAU,EAAEC,OAAO,CAAC;EACxC;EAEAC,IAAIA,CAAA,EAAG;IACL,OAAO,IAAI,CAACd,IAAI,CAACc,IAAI,CAAC,CAAC;EACzB;EAEAC,MAAMA,CAAA,EAAG;IACP,OAAO,IAAI,CAACf,IAAI,CAACe,MAAM,CAAC,CAAC;EAC3B;EAEAC,OAAOA,CAAA,EAAG;IACR,OAAO,IAAI,CAAChB,IAAI,CAACgB,OAAO,CAAC,CAAC;EAC5B;EAEA,CAACC,MAAM,CAACC,QAAQ,IAAI;IAClB,OAAO,IAAI,CAAClB,IAAI,CAACiB,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC;EACrC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}