{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ClientSSLSecurity = void 0;\nconst fs = require(\"fs\");\nconst https = require(\"https\");\nconst _ = require(\"lodash\");\n/**\n * activates SSL for an already existing client\n *\n * @module ClientSSLSecurity\n * @param {Buffer|String}   key\n * @param {Buffer|String}   cert\n * @param {Buffer|String|Array}   [ca]\n * @param {Object}          [defaults]\n * @constructor\n */\nclass ClientSSLSecurity {\n  constructor(key, cert, ca, defaults) {\n    if (key) {\n      if (Buffer.isBuffer(key)) {\n        this.key = key;\n      } else if (typeof key === 'string') {\n        this.key = fs.readFileSync(key);\n      } else {\n        throw new Error('key should be a buffer or a string!');\n      }\n    }\n    if (cert) {\n      if (Buffer.isBuffer(cert)) {\n        this.cert = cert;\n      } else if (typeof cert === 'string') {\n        this.cert = fs.readFileSync(cert);\n      } else {\n        throw new Error('cert should be a buffer or a string!');\n      }\n    }\n    if (ca) {\n      if (Buffer.isBuffer(ca) || Array.isArray(ca)) {\n        this.ca = ca;\n      } else if (typeof ca === 'string') {\n        this.ca = fs.readFileSync(ca);\n      } else {\n        defaults = ca;\n        this.ca = null;\n      }\n    }\n    this.defaults = {};\n    _.merge(this.defaults, defaults);\n    this.agent = null;\n  }\n  toXML() {\n    return '';\n  }\n  addOptions(options) {\n    let httpsAgent = null;\n    options.key = this.key;\n    options.cert = this.cert;\n    options.ca = this.ca;\n    _.merge(options, this.defaults);\n    if (!!options.forever) {\n      if (!this.agent) {\n        options.keepAlive = true;\n        this.agent = new https.Agent(options);\n      }\n      httpsAgent = this.agent;\n    } else {\n      httpsAgent = new https.Agent(options);\n    }\n    options.httpsAgent = httpsAgent;\n  }\n}\nexports.ClientSSLSecurity = ClientSSLSecurity;","map":{"version":3,"names":["fs","require","https","_","ClientSSLSecurity","constructor","key","cert","ca","defaults","Buffer","isBuffer","readFileSync","Error","Array","isArray","merge","agent","toXML","addOptions","options","httpsAgent","forever","keepAlive","Agent","exports"],"sources":["../../src/security/ClientSSLSecurity.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,EAAA,GAAAC,OAAA;AACA,MAAAC,KAAA,GAAAD,OAAA;AACA,MAAAE,CAAA,GAAAF,OAAA;AAGA;;;;;;;;;;AAUA,MAAaG,iBAAiB;EAO5BC,YAAYC,GAAoB,EAAEC,IAAqB,EAAEC,EAAkC,EAAEC,QAAc;IACzG,IAAIH,GAAG,EAAE;MACP,IAAII,MAAM,CAACC,QAAQ,CAACL,GAAG,CAAC,EAAE;QACxB,IAAI,CAACA,GAAG,GAAGA,GAAG;OACf,MAAM,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;QAClC,IAAI,CAACA,GAAG,GAAGN,EAAE,CAACY,YAAY,CAACN,GAAG,CAAC;OAChC,MAAM;QACL,MAAM,IAAIO,KAAK,CAAC,qCAAqC,CAAC;;;IAI1D,IAAIN,IAAI,EAAE;MACR,IAAIG,MAAM,CAACC,QAAQ,CAACJ,IAAI,CAAC,EAAE;QACzB,IAAI,CAACA,IAAI,GAAGA,IAAI;OACjB,MAAM,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;QACnC,IAAI,CAACA,IAAI,GAAGP,EAAE,CAACY,YAAY,CAACL,IAAI,CAAC;OAClC,MAAM;QACL,MAAM,IAAIM,KAAK,CAAC,sCAAsC,CAAC;;;IAI3D,IAAIL,EAAE,EAAE;MACN,IAAIE,MAAM,CAACC,QAAQ,CAACH,EAAE,CAAC,IAAIM,KAAK,CAACC,OAAO,CAACP,EAAE,CAAC,EAAE;QAC5C,IAAI,CAACA,EAAE,GAAGA,EAAE;OACb,MAAM,IAAI,OAAOA,EAAE,KAAK,QAAQ,EAAE;QACjC,IAAI,CAACA,EAAE,GAAGR,EAAE,CAACY,YAAY,CAACJ,EAAE,CAAC;OAC9B,MAAM;QACLC,QAAQ,GAAGD,EAAE;QACb,IAAI,CAACA,EAAE,GAAG,IAAI;;;IAIlB,IAAI,CAACC,QAAQ,GAAG,EAAE;IAClBN,CAAC,CAACa,KAAK,CAAC,IAAI,CAACP,QAAQ,EAAEA,QAAQ,CAAC;IAEhC,IAAI,CAACQ,KAAK,GAAG,IAAI;EACnB;EAEOC,KAAKA,CAAA;IACV,OAAO,EAAE;EACX;EAEOC,UAAUA,CAACC,OAAY;IAC5B,IAAIC,UAAU,GAAG,IAAI;IAErBD,OAAO,CAACd,GAAG,GAAG,IAAI,CAACA,GAAG;IACtBc,OAAO,CAACb,IAAI,GAAG,IAAI,CAACA,IAAI;IACxBa,OAAO,CAACZ,EAAE,GAAG,IAAI,CAACA,EAAE;IACpBL,CAAC,CAACa,KAAK,CAACI,OAAO,EAAE,IAAI,CAACX,QAAQ,CAAC;IAE/B,IAAI,CAAC,CAACW,OAAO,CAACE,OAAO,EAAE;MACrB,IAAI,CAAC,IAAI,CAACL,KAAK,EAAE;QACfG,OAAO,CAACG,SAAS,GAAG,IAAI;QAExB,IAAI,CAACN,KAAK,GAAG,IAAIf,KAAK,CAACsB,KAAK,CAACJ,OAAO,CAAC;;MAGvCC,UAAU,GAAG,IAAI,CAACJ,KAAK;KACxB,MAAM;MACLI,UAAU,GAAG,IAAInB,KAAK,CAACsB,KAAK,CAACJ,OAAO,CAAC;;IAGvCA,OAAO,CAACC,UAAU,GAAGA,UAAU;EACjC;;AAtEFI,OAAA,CAAArB,iBAAA,GAAAA,iBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}