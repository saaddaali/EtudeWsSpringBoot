{"ast":null,"code":"// services/reservationService.js\nimport axios from \"axios\";\nconst API_URL = \"http://localhost:8080/services/ws\";\nconst createSoapEnvelope = (method, params) => `\n  <soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" \n                    xmlns:ser=\"http://controller.hotelgestion.example.com/\">\n    <soapenv:Header/>\n    <soapenv:Body>\n      <ser:${method}>${params}</ser:${method}>\n    </soapenv:Body>\n  </soapenv:Envelope>\n`;\nexport const reservationService = {\n  async getReservations() {\n    try {\n      const response = await axios.post(API_URL, createSoapEnvelope(\"getAllReservations\", \"\"), {\n        headers: {\n          \"Content-Type\": \"text/xml\"\n        }\n      });\n      console.log(\"Response XML:\", response.data); // Pour le débogage\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      return this.transformReservations(xmlDoc);\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération des réservations:\", error);\n      throw error;\n    }\n  },\n  async createReservation(formData) {\n    try {\n      const [firstName, ...lastNameParts] = formData.clientName.split(\" \");\n      const params = `\n        <dateDebut>${formData.startDate}</dateDebut>\n        <dateFin>${formData.endDate}</dateFin>\n        <client>\n          <nom>${lastNameParts.join(\" \")}</nom>\n          <prenom>${firstName}</prenom>\n          <email>${formData.email}</email>\n          <telephone>${formData.phone}</telephone>\n        </client>\n        <chambre>\n          <type>${formData.roomType}</type>\n          <disponible>true</disponible>\n        </chambre>\n      `;\n      console.log(\"Request XML:\", createSoapEnvelope(\"createReservation\", params)); // Pour le débogage\n\n      const response = await axios.post(API_URL, createSoapEnvelope(\"createReservation\", params), {\n        headers: {\n          \"Content-Type\": \"text/xml\"\n        }\n      });\n      console.log(\"Response XML:\", response.data); // Pour le débogage\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      return this.transformReservation(xmlDoc.querySelector(\"return\"));\n    } catch (error) {\n      console.error(\"Erreur lors de la création de la réservation:\", error);\n      throw error;\n    }\n  },\n  transformReservation(node) {\n    if (!node) return null;\n    const getNodeValue = path => {\n      const element = node.querySelector(path);\n      return element ? element.textContent : \"\";\n    };\n    return {\n      id: getNodeValue(\"id\"),\n      client: {\n        nom: getNodeValue(\"client/nom\"),\n        prenom: getNodeValue(\"client/prenom\"),\n        email: getNodeValue(\"client/email\"),\n        telephone: getNodeValue(\"client/telephone\")\n      },\n      chambre: {\n        type: getNodeValue(\"chambre/type\"),\n        disponible: getNodeValue(\"chambre/disponible\") === \"true\"\n      },\n      dateDebut: getNodeValue(\"dateDebut\"),\n      dateFin: getNodeValue(\"dateFin\"),\n      preferences: getNodeValue(\"preferences\")\n    };\n  },\n  transformReservations(xmlDoc) {\n    const reservations = xmlDoc.querySelectorAll(\"return\");\n    return Array.from(reservations).map(res => this.transformReservation(res)).filter(res => res !== null);\n  }\n};","map":{"version":3,"names":["axios","API_URL","createSoapEnvelope","method","params","reservationService","getReservations","response","post","headers","console","log","data","parser","DOMParser","xmlDoc","parseFromString","transformReservations","error","createReservation","formData","firstName","lastNameParts","clientName","split","startDate","endDate","join","email","phone","roomType","transformReservation","querySelector","node","getNodeValue","path","element","textContent","id","client","nom","prenom","telephone","chambre","type","disponible","dateDebut","dateFin","preferences","reservations","querySelectorAll","Array","from","map","res","filter"],"sources":["/Users/soukaina/Desktop/hotel-reservation-management-soap/frontend-soapt/src/services/reservationService.js"],"sourcesContent":["// services/reservationService.js\nimport axios from \"axios\";\n\nconst API_URL = \"http://localhost:8080/services/ws\";\n\nconst createSoapEnvelope = (method, params) => `\n  <soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" \n                    xmlns:ser=\"http://controller.hotelgestion.example.com/\">\n    <soapenv:Header/>\n    <soapenv:Body>\n      <ser:${method}>${params}</ser:${method}>\n    </soapenv:Body>\n  </soapenv:Envelope>\n`;\n\nexport const reservationService = {\n  async getReservations() {\n    try {\n      const response = await axios.post(\n        API_URL,\n        createSoapEnvelope(\"getAllReservations\", \"\"),\n        {\n          headers: {\n            \"Content-Type\": \"text/xml\",\n          },\n        }\n      );\n      console.log(\"Response XML:\", response.data); // Pour le débogage\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      return this.transformReservations(xmlDoc);\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération des réservations:\", error);\n      throw error;\n    }\n  },\n\n  async createReservation(formData) {\n    try {\n      const [firstName, ...lastNameParts] = formData.clientName.split(\" \");\n      const params = `\n        <dateDebut>${formData.startDate}</dateDebut>\n        <dateFin>${formData.endDate}</dateFin>\n        <client>\n          <nom>${lastNameParts.join(\" \")}</nom>\n          <prenom>${firstName}</prenom>\n          <email>${formData.email}</email>\n          <telephone>${formData.phone}</telephone>\n        </client>\n        <chambre>\n          <type>${formData.roomType}</type>\n          <disponible>true</disponible>\n        </chambre>\n      `;\n\n      console.log(\n        \"Request XML:\",\n        createSoapEnvelope(\"createReservation\", params)\n      ); // Pour le débogage\n\n      const response = await axios.post(\n        API_URL,\n        createSoapEnvelope(\"createReservation\", params),\n        {\n          headers: {\n            \"Content-Type\": \"text/xml\",\n          },\n        }\n      );\n\n      console.log(\"Response XML:\", response.data); // Pour le débogage\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      return this.transformReservation(xmlDoc.querySelector(\"return\"));\n    } catch (error) {\n      console.error(\"Erreur lors de la création de la réservation:\", error);\n      throw error;\n    }\n  },\n\n  transformReservation(node) {\n    if (!node) return null;\n\n    const getNodeValue = (path) => {\n      const element = node.querySelector(path);\n      return element ? element.textContent : \"\";\n    };\n\n    return {\n      id: getNodeValue(\"id\"),\n      client: {\n        nom: getNodeValue(\"client/nom\"),\n        prenom: getNodeValue(\"client/prenom\"),\n        email: getNodeValue(\"client/email\"),\n        telephone: getNodeValue(\"client/telephone\"),\n      },\n      chambre: {\n        type: getNodeValue(\"chambre/type\"),\n        disponible: getNodeValue(\"chambre/disponible\") === \"true\",\n      },\n      dateDebut: getNodeValue(\"dateDebut\"),\n      dateFin: getNodeValue(\"dateFin\"),\n      preferences: getNodeValue(\"preferences\"),\n    };\n  },\n\n  transformReservations(xmlDoc) {\n    const reservations = xmlDoc.querySelectorAll(\"return\");\n    return Array.from(reservations)\n      .map((res) => this.transformReservation(res))\n      .filter((res) => res !== null);\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}