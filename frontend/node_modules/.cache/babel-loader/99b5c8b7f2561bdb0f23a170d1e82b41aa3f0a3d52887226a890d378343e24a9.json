{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:8080/services/ws\";\nconst createSoapEnvelope = (method, params) => `\n  <soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" \n                    xmlns:hot=\"http://controller.hotelgestion.example.com/\">\n    <soapenv:Header/>\n    <soapenv:Body>\n      <hot:${method}>${params}</hot:${method}>\n    </soapenv:Body>\n  </soapenv:Envelope>\n`;\nexport const reservationService = {\n  async getReservations() {\n    try {\n      const response = await axios.post(API_URL, createSoapEnvelope(\"getAllReservations\", \"\"), {\n        headers: {\n          \"Content-Type\": \"text/xml\"\n        }\n      });\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      return this.transformReservations(xmlDoc);\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération des réservations:\", error);\n      throw new Error(\"Erreur SOAP lors du chargement\");\n    }\n  },\n  async getReservationById(id) {\n    try {\n      const params = `<id>${id}</id>`;\n      const response = await axios.post(API_URL, createSoapEnvelope(\"getReservationById\", params), {\n        headers: {\n          \"Content-Type\": \"text/xml\"\n        }\n      });\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      return this.transformReservation(xmlDoc.querySelector(\"return\"));\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération de la réservation:\", error);\n      throw new Error(\"Erreur SOAP lors de la récupération\");\n    }\n  },\n  async createReservation(formData) {\n    try {\n      const [firstName, ...lastNameParts] = formData.clientName.split(\" \");\n      const params = `\n        <dateDebut>${formData.startDate}</dateDebut>\n        <dateFin>${formData.endDate}</dateFin>\n        <client>\n          <nom>${lastNameParts.join(\" \")}</nom>\n          <prenom>${firstName}</prenom>\n          <email>${formData.email}</email>\n          <telephone>${formData.phone}</telephone>\n        </client>\n        <chambre>\n          <type>${formData.roomType}</type>\n          <disponible>true</disponible>\n        </chambre>\n      `;\n      const response = await axios.post(API_URL, createSoapEnvelope(\"createReservation\", params), {\n        headers: {\n          \"Content-Type\": \"text/xml\"\n        }\n      });\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n\n      // Vérifier les erreurs SOAP\n      const faultElement = xmlDoc.querySelector(\"soap\\\\:Fault, Fault\");\n      if (faultElement) {\n        throw new Error(\"Erreur SOAP lors de la création\");\n      }\n      return this.transformReservation(xmlDoc);\n    } catch (error) {\n      console.error(\"Erreur lors de la création de la réservation:\", error);\n      throw error;\n    }\n  },\n  async updateReservation(id, formData) {\n    try {\n      const [firstName, ...lastNameParts] = formData.clientName.split(\" \");\n      // Enlever le wrapper arg0 et mettre les éléments directement\n      const params = `\n        <id>${id}</id>\n        <dateDebut>${formData.startDate}</dateDebut>\n        <dateFin>${formData.endDate}</dateFin>\n        <client>\n          <nom>${lastNameParts.join(\" \")}</nom>\n          <prenom>${firstName}</prenom>\n          <email>${formData.email}</email>\n          <telephone>${formData.phone}</telephone>\n        </client>\n        <chambre>\n          <type>${formData.roomType}</type>\n          <disponible>true</disponible>\n        </chambre>\n      `;\n      const response = await axios.post(API_URL, createSoapEnvelope(\"updateReservation\", params), {\n        headers: {\n          \"Content-Type\": \"text/xml\"\n        }\n      });\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      const faultElement = xmlDoc.querySelector(\"soap\\\\:Fault, Fault\");\n      if (faultElement) {\n        var _faultElement$querySe;\n        const faultString = (_faultElement$querySe = faultElement.querySelector(\"faultstring\")) === null || _faultElement$querySe === void 0 ? void 0 : _faultElement$querySe.textContent;\n        throw new Error(faultString || \"Erreur SOAP lors de la mise à jour\");\n      }\n      const result = xmlDoc.querySelector(\"return\");\n      if (!result || result.textContent !== \"true\") {\n        throw new Error(\"Erreur SOAP lors de la mise à jour\");\n      }\n      return true;\n    } catch (error) {\n      var _error$response, _error$response2, _error$response3;\n      console.error(\"Détails de l'erreur SOAP:\", {\n        data: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data,\n        status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status,\n        headers: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.headers\n      });\n      throw error;\n    }\n  },\n  async deleteReservation(id) {\n    try {\n      const params = `<id>${id}</id>`;\n      const response = await axios.post(API_URL, createSoapEnvelope(\"deleteReservation\", params), {\n        headers: {\n          \"Content-Type\": \"text/xml\"\n        }\n      });\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      const result = xmlDoc.querySelector(\"return\");\n      if (!result || result.textContent !== \"true\") {\n        throw new Error(\"Erreur SOAP lors de la suppression\");\n      }\n      return true;\n    } catch (error) {\n      console.error(\"Erreur lors de la suppression de la réservation:\", error);\n      throw error;\n    }\n  },\n  transformReservation(node) {\n    if (!node) return null;\n    const getNodeValue = (node, path) => {\n      const element = node.querySelector(path);\n      return element ? element.textContent : \"\";\n    };\n    return {\n      id: getNodeValue(node, \"id\"),\n      clientName: `${getNodeValue(node, \"prenom\")} ${getNodeValue(node, \"nom\")}`.trim(),\n      email: getNodeValue(node, \"email\"),\n      phone: getNodeValue(node, \"telephone\"),\n      roomType: getNodeValue(node, \"type\"),\n      startDate: getNodeValue(node, \"dateDebut\"),\n      endDate: getNodeValue(node, \"dateFin\"),\n      preferences: getNodeValue(node, \"preferences\") || \"\"\n    };\n  },\n  transformReservations(xmlDoc) {\n    const reservations = xmlDoc.querySelectorAll(\"return\");\n    return Array.from(reservations).map(res => this.transformReservation(res));\n  }\n};","map":{"version":3,"names":["axios","API_URL","createSoapEnvelope","method","params","reservationService","getReservations","response","post","headers","parser","DOMParser","xmlDoc","parseFromString","data","transformReservations","error","console","Error","getReservationById","id","transformReservation","querySelector","createReservation","formData","firstName","lastNameParts","clientName","split","startDate","endDate","join","email","phone","roomType","faultElement","updateReservation","_faultElement$querySe","faultString","textContent","result","_error$response","_error$response2","_error$response3","status","deleteReservation","node","getNodeValue","path","element","trim","preferences","reservations","querySelectorAll","Array","from","map","res"],"sources":["/Users/soukaina/Desktop/hotel-reservation-management-soap/frontend-soapt/src/services/reservationService.js"],"sourcesContent":["import axios from \"axios\";\n\nconst API_URL = \"http://localhost:8080/services/ws\";\n\nconst createSoapEnvelope = (method, params) => `\n  <soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" \n                    xmlns:hot=\"http://controller.hotelgestion.example.com/\">\n    <soapenv:Header/>\n    <soapenv:Body>\n      <hot:${method}>${params}</hot:${method}>\n    </soapenv:Body>\n  </soapenv:Envelope>\n`;\n\nexport const reservationService = {\n  async getReservations() {\n    try {\n      const response = await axios.post(\n        API_URL,\n        createSoapEnvelope(\"getAllReservations\", \"\"),\n        { headers: { \"Content-Type\": \"text/xml\" } }\n      );\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      return this.transformReservations(xmlDoc);\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération des réservations:\", error);\n      throw new Error(\"Erreur SOAP lors du chargement\");\n    }\n  },\n\n  async getReservationById(id) {\n    try {\n      const params = `<id>${id}</id>`;\n      const response = await axios.post(\n        API_URL,\n        createSoapEnvelope(\"getReservationById\", params),\n        { headers: { \"Content-Type\": \"text/xml\" } }\n      );\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      return this.transformReservation(xmlDoc.querySelector(\"return\"));\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération de la réservation:\", error);\n      throw new Error(\"Erreur SOAP lors de la récupération\");\n    }\n  },\n\n  async createReservation(formData) {\n    try {\n      const [firstName, ...lastNameParts] = formData.clientName.split(\" \");\n      const params = `\n        <dateDebut>${formData.startDate}</dateDebut>\n        <dateFin>${formData.endDate}</dateFin>\n        <client>\n          <nom>${lastNameParts.join(\" \")}</nom>\n          <prenom>${firstName}</prenom>\n          <email>${formData.email}</email>\n          <telephone>${formData.phone}</telephone>\n        </client>\n        <chambre>\n          <type>${formData.roomType}</type>\n          <disponible>true</disponible>\n        </chambre>\n      `;\n\n      const response = await axios.post(\n        API_URL,\n        createSoapEnvelope(\"createReservation\", params),\n        { headers: { \"Content-Type\": \"text/xml\" } }\n      );\n\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n\n      // Vérifier les erreurs SOAP\n      const faultElement = xmlDoc.querySelector(\"soap\\\\:Fault, Fault\");\n      if (faultElement) {\n        throw new Error(\"Erreur SOAP lors de la création\");\n      }\n\n      return this.transformReservation(xmlDoc);\n    } catch (error) {\n      console.error(\"Erreur lors de la création de la réservation:\", error);\n      throw error;\n    }\n  },\n\n  async updateReservation(id, formData) {\n    try {\n      const [firstName, ...lastNameParts] = formData.clientName.split(\" \");\n      // Enlever le wrapper arg0 et mettre les éléments directement\n      const params = `\n        <id>${id}</id>\n        <dateDebut>${formData.startDate}</dateDebut>\n        <dateFin>${formData.endDate}</dateFin>\n        <client>\n          <nom>${lastNameParts.join(\" \")}</nom>\n          <prenom>${firstName}</prenom>\n          <email>${formData.email}</email>\n          <telephone>${formData.phone}</telephone>\n        </client>\n        <chambre>\n          <type>${formData.roomType}</type>\n          <disponible>true</disponible>\n        </chambre>\n      `;\n\n      const response = await axios.post(\n        API_URL,\n        createSoapEnvelope(\"updateReservation\", params),\n        { headers: { \"Content-Type\": \"text/xml\" } }\n      );\n\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n\n      const faultElement = xmlDoc.querySelector(\"soap\\\\:Fault, Fault\");\n      if (faultElement) {\n        const faultString =\n          faultElement.querySelector(\"faultstring\")?.textContent;\n        throw new Error(faultString || \"Erreur SOAP lors de la mise à jour\");\n      }\n\n      const result = xmlDoc.querySelector(\"return\");\n      if (!result || result.textContent !== \"true\") {\n        throw new Error(\"Erreur SOAP lors de la mise à jour\");\n      }\n\n      return true;\n    } catch (error) {\n      console.error(\"Détails de l'erreur SOAP:\", {\n        data: error.response?.data,\n        status: error.response?.status,\n        headers: error.response?.headers,\n      });\n      throw error;\n    }\n  },\n  async deleteReservation(id) {\n    try {\n      const params = `<id>${id}</id>`;\n      const response = await axios.post(\n        API_URL,\n        createSoapEnvelope(\"deleteReservation\", params),\n        { headers: { \"Content-Type\": \"text/xml\" } }\n      );\n\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n\n      const result = xmlDoc.querySelector(\"return\");\n      if (!result || result.textContent !== \"true\") {\n        throw new Error(\"Erreur SOAP lors de la suppression\");\n      }\n\n      return true;\n    } catch (error) {\n      console.error(\"Erreur lors de la suppression de la réservation:\", error);\n      throw error;\n    }\n  },\n\n  transformReservation(node) {\n    if (!node) return null;\n\n    const getNodeValue = (node, path) => {\n      const element = node.querySelector(path);\n      return element ? element.textContent : \"\";\n    };\n\n    return {\n      id: getNodeValue(node, \"id\"),\n      clientName: `${getNodeValue(node, \"prenom\")} ${getNodeValue(\n        node,\n        \"nom\"\n      )}`.trim(),\n      email: getNodeValue(node, \"email\"),\n      phone: getNodeValue(node, \"telephone\"),\n      roomType: getNodeValue(node, \"type\"),\n      startDate: getNodeValue(node, \"dateDebut\"),\n      endDate: getNodeValue(node, \"dateFin\"),\n      preferences: getNodeValue(node, \"preferences\") || \"\",\n    };\n  },\n\n  transformReservations(xmlDoc) {\n    const reservations = xmlDoc.querySelectorAll(\"return\");\n    return Array.from(reservations).map((res) =>\n      this.transformReservation(res)\n    );\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}