{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertIsDocumentFragmentNode = exports.assertIsDocumentTypeNode = exports.assertIsDocumentNode = exports.assertIsCommentNode = exports.assertIsProcessingInstructionNode = exports.assertIsCDATASectionNode = exports.assertIsTextNode = exports.assertIsAttributeNode = exports.assertIsElementNode = exports.isDocumentFragmentNode = exports.isDocumentTypeNode = exports.isDocumentNode = exports.isCommentNode = exports.isProcessingInstructionNode = exports.isCDATASectionNode = exports.isTextNode = exports.isAttributeNode = exports.isElementNode = exports.assertIsArrayOfNodes = exports.isArrayOfNodes = exports.assertIsNodeLike = exports.isNodeLike = exports.NodeTypes = void 0;\nvar NodeTypes;\n(function (NodeTypes) {\n  NodeTypes[NodeTypes[\"ELEMENT_NODE\"] = 1] = \"ELEMENT_NODE\";\n  NodeTypes[NodeTypes[\"ATTRIBUTE_NODE\"] = 2] = \"ATTRIBUTE_NODE\";\n  NodeTypes[NodeTypes[\"TEXT_NODE\"] = 3] = \"TEXT_NODE\";\n  NodeTypes[NodeTypes[\"CDATA_SECTION_NODE\"] = 4] = \"CDATA_SECTION_NODE\";\n  NodeTypes[NodeTypes[\"PROCESSING_INSTRUCTION_NODE\"] = 7] = \"PROCESSING_INSTRUCTION_NODE\";\n  NodeTypes[NodeTypes[\"COMMENT_NODE\"] = 8] = \"COMMENT_NODE\";\n  NodeTypes[NodeTypes[\"DOCUMENT_NODE\"] = 9] = \"DOCUMENT_NODE\";\n  NodeTypes[NodeTypes[\"DOCUMENT_TYPE_NODE\"] = 10] = \"DOCUMENT_TYPE_NODE\";\n  NodeTypes[NodeTypes[\"DOCUMENT_FRAGMENT_NODE\"] = 11] = \"DOCUMENT_FRAGMENT_NODE\";\n})(NodeTypes || (exports.NodeTypes = NodeTypes = {}));\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isNodeLike(value) {\n  return value && typeof value === \"object\" && Number.isInteger(value.nodeType) && value.nodeType >= 1 && value.nodeType <= 11 && typeof value.nodeName === \"string\" && typeof value.appendChild === \"function\" && typeof value.removeChild === \"function\";\n}\nexports.isNodeLike = isNodeLike;\nfunction assertIsNodeLike(value) {\n  if (!isNodeLike(value)) {\n    throw new Error(`Value is not a Node-like object. Received: ${value}`);\n  }\n}\nexports.assertIsNodeLike = assertIsNodeLike;\nfunction isArrayOfNodes(value) {\n  return Array.isArray(value) && value.every(isNodeLike);\n}\nexports.isArrayOfNodes = isArrayOfNodes;\nfunction assertIsArrayOfNodes(value) {\n  if (!isArrayOfNodes(value)) {\n    throw new Error(\"Value is not an array of Nodes\");\n  }\n}\nexports.assertIsArrayOfNodes = assertIsArrayOfNodes;\nfunction isNodeOfType(type, value) {\n  return isNodeLike(value) && value.nodeType === type;\n}\nfunction assertIsNodeOfType(type, value) {\n  const typeName = Object.keys(NodeTypes).find(key => NodeTypes[key] === type);\n  if (!isNodeOfType(type, value)) {\n    throw new Error(`Value is not of type ${typeName}`);\n  }\n}\nconst isElementNode = value => isNodeOfType(NodeTypes.ELEMENT_NODE, value);\nexports.isElementNode = isElementNode;\nconst isAttributeNode = value => isNodeOfType(NodeTypes.ATTRIBUTE_NODE, value);\nexports.isAttributeNode = isAttributeNode;\nconst isTextNode = value => isNodeOfType(NodeTypes.TEXT_NODE, value);\nexports.isTextNode = isTextNode;\nconst isCDATASectionNode = value => isNodeOfType(NodeTypes.CDATA_SECTION_NODE, value);\nexports.isCDATASectionNode = isCDATASectionNode;\nconst isProcessingInstructionNode = value => isNodeOfType(NodeTypes.PROCESSING_INSTRUCTION_NODE, value);\nexports.isProcessingInstructionNode = isProcessingInstructionNode;\nconst isCommentNode = value => isNodeOfType(NodeTypes.COMMENT_NODE, value);\nexports.isCommentNode = isCommentNode;\nconst isDocumentNode = value => isNodeOfType(NodeTypes.DOCUMENT_NODE, value);\nexports.isDocumentNode = isDocumentNode;\nconst isDocumentTypeNode = value => isNodeOfType(NodeTypes.DOCUMENT_TYPE_NODE, value);\nexports.isDocumentTypeNode = isDocumentTypeNode;\nconst isDocumentFragmentNode = value => isNodeOfType(NodeTypes.DOCUMENT_FRAGMENT_NODE, value);\nexports.isDocumentFragmentNode = isDocumentFragmentNode;\nconst assertIsElementNode = value => {\n  assertIsNodeOfType(NodeTypes.ELEMENT_NODE, value);\n};\nexports.assertIsElementNode = assertIsElementNode;\nconst assertIsAttributeNode = value => assertIsNodeOfType(NodeTypes.ATTRIBUTE_NODE, value);\nexports.assertIsAttributeNode = assertIsAttributeNode;\nconst assertIsTextNode = value => assertIsNodeOfType(NodeTypes.TEXT_NODE, value);\nexports.assertIsTextNode = assertIsTextNode;\nconst assertIsCDATASectionNode = value => assertIsNodeOfType(NodeTypes.CDATA_SECTION_NODE, value);\nexports.assertIsCDATASectionNode = assertIsCDATASectionNode;\nconst assertIsProcessingInstructionNode = value => assertIsNodeOfType(NodeTypes.PROCESSING_INSTRUCTION_NODE, value);\nexports.assertIsProcessingInstructionNode = assertIsProcessingInstructionNode;\nconst assertIsCommentNode = value => assertIsNodeOfType(NodeTypes.COMMENT_NODE, value);\nexports.assertIsCommentNode = assertIsCommentNode;\nconst assertIsDocumentNode = value => assertIsNodeOfType(NodeTypes.DOCUMENT_NODE, value);\nexports.assertIsDocumentNode = assertIsDocumentNode;\nconst assertIsDocumentTypeNode = value => assertIsNodeOfType(NodeTypes.DOCUMENT_TYPE_NODE, value);\nexports.assertIsDocumentTypeNode = assertIsDocumentTypeNode;\nconst assertIsDocumentFragmentNode = value => assertIsNodeOfType(NodeTypes.DOCUMENT_FRAGMENT_NODE, value);\nexports.assertIsDocumentFragmentNode = assertIsDocumentFragmentNode;","map":{"version":3,"names":["NodeTypes","exports","isNodeLike","value","Number","isInteger","nodeType","nodeName","appendChild","removeChild","assertIsNodeLike","Error","isArrayOfNodes","Array","isArray","every","assertIsArrayOfNodes","isNodeOfType","type","assertIsNodeOfType","typeName","Object","keys","find","key","isElementNode","ELEMENT_NODE","isAttributeNode","ATTRIBUTE_NODE","isTextNode","TEXT_NODE","isCDATASectionNode","CDATA_SECTION_NODE","isProcessingInstructionNode","PROCESSING_INSTRUCTION_NODE","isCommentNode","COMMENT_NODE","isDocumentNode","DOCUMENT_NODE","isDocumentTypeNode","DOCUMENT_TYPE_NODE","isDocumentFragmentNode","DOCUMENT_FRAGMENT_NODE","assertIsElementNode","assertIsAttributeNode","assertIsTextNode","assertIsCDATASectionNode","assertIsProcessingInstructionNode","assertIsCommentNode","assertIsDocumentNode","assertIsDocumentTypeNode","assertIsDocumentFragmentNode"],"sources":["/Users/soukaina/Desktop/hotel-reservation-management-soap/frontend-soapt/node_modules/@xmldom/is-dom-node/src/index.ts"],"sourcesContent":["export enum NodeTypes {\n  ELEMENT_NODE = 1,\n  ATTRIBUTE_NODE = 2,\n  TEXT_NODE = 3,\n  CDATA_SECTION_NODE = 4,\n  PROCESSING_INSTRUCTION_NODE = 7,\n  COMMENT_NODE = 8,\n  DOCUMENT_NODE = 9,\n  DOCUMENT_TYPE_NODE = 10,\n  DOCUMENT_FRAGMENT_NODE = 11,\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isNodeLike(value: any): value is Node {\n  return (\n    value &&\n    typeof value === \"object\" &&\n    Number.isInteger(value.nodeType) &&\n    value.nodeType >= 1 &&\n    value.nodeType <= 11 &&\n    typeof value.nodeName === \"string\" &&\n    typeof value.appendChild === \"function\" &&\n    typeof value.removeChild === \"function\"\n  );\n}\n\nexport function assertIsNodeLike(value: unknown): asserts value is Node {\n  if (!isNodeLike(value)) {\n    throw new Error(`Value is not a Node-like object. Received: ${value}`);\n  }\n}\n\nexport function isArrayOfNodes(value: unknown): value is Node[] {\n  return Array.isArray(value) && value.every(isNodeLike);\n}\n\nexport function assertIsArrayOfNodes(value: unknown): asserts value is Node[] {\n  if (!isArrayOfNodes(value)) {\n    throw new Error(\"Value is not an array of Nodes\");\n  }\n}\n\nfunction isNodeOfType(type: number, value: unknown): value is Node {\n  return isNodeLike(value) && value.nodeType === type;\n}\n\nfunction assertIsNodeOfType(type: number, value: unknown): void {\n  const typeName = Object.keys(NodeTypes).find(\n    (key) => NodeTypes[key as keyof typeof NodeTypes] === type,\n  );\n  if (!isNodeOfType(type, value)) {\n    throw new Error(`Value is not of type ${typeName}`);\n  }\n}\n\nexport const isElementNode = (value: unknown): value is Element =>\n  isNodeOfType(NodeTypes.ELEMENT_NODE, value);\nexport const isAttributeNode = (value: unknown): value is Attr =>\n  isNodeOfType(NodeTypes.ATTRIBUTE_NODE, value);\nexport const isTextNode = (value: unknown): value is Text =>\n  isNodeOfType(NodeTypes.TEXT_NODE, value);\nexport const isCDATASectionNode = (value: unknown): value is CDATASection =>\n  isNodeOfType(NodeTypes.CDATA_SECTION_NODE, value);\nexport const isProcessingInstructionNode = (value: unknown): value is ProcessingInstruction =>\n  isNodeOfType(NodeTypes.PROCESSING_INSTRUCTION_NODE, value);\nexport const isCommentNode = (value: unknown): value is Comment =>\n  isNodeOfType(NodeTypes.COMMENT_NODE, value);\nexport const isDocumentNode = (value: unknown): value is Document =>\n  isNodeOfType(NodeTypes.DOCUMENT_NODE, value);\nexport const isDocumentTypeNode = (value: unknown): value is DocumentType =>\n  isNodeOfType(NodeTypes.DOCUMENT_TYPE_NODE, value);\nexport const isDocumentFragmentNode = (value: unknown): value is DocumentFragment =>\n  isNodeOfType(NodeTypes.DOCUMENT_FRAGMENT_NODE, value);\n\nexport const assertIsElementNode: (value: unknown) => asserts value is Element = (\n  value: unknown,\n): asserts value is Element => {\n  assertIsNodeOfType(NodeTypes.ELEMENT_NODE, value);\n};\nexport const assertIsAttributeNode: (value: unknown) => asserts value is Attr = (value) =>\n  assertIsNodeOfType(NodeTypes.ATTRIBUTE_NODE, value);\n\nexport const assertIsTextNode: (value: unknown) => asserts value is Text = (value) =>\n  assertIsNodeOfType(NodeTypes.TEXT_NODE, value);\n\nexport const assertIsCDATASectionNode: (value: unknown) => asserts value is CDATASection = (\n  value,\n) => assertIsNodeOfType(NodeTypes.CDATA_SECTION_NODE, value);\n\nexport const assertIsProcessingInstructionNode: (\n  value: unknown,\n) => asserts value is ProcessingInstruction = (value) =>\n  assertIsNodeOfType(NodeTypes.PROCESSING_INSTRUCTION_NODE, value);\n\nexport const assertIsCommentNode: (value: unknown) => asserts value is Comment = (value) =>\n  assertIsNodeOfType(NodeTypes.COMMENT_NODE, value);\n\nexport const assertIsDocumentNode: (value: unknown) => asserts value is Document = (value) =>\n  assertIsNodeOfType(NodeTypes.DOCUMENT_NODE, value);\n\nexport const assertIsDocumentTypeNode: (value: unknown) => asserts value is DocumentType = (\n  value,\n) => assertIsNodeOfType(NodeTypes.DOCUMENT_TYPE_NODE, value);\n\nexport const assertIsDocumentFragmentNode: (value: unknown) => asserts value is DocumentFragment = (\n  value,\n) => assertIsNodeOfType(NodeTypes.DOCUMENT_FRAGMENT_NODE, value);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}