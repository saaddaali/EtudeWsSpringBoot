{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { reservationService } from \"../services/reservationService\";\nexport const useReservation = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    clientName: \"\",\n    email: \"\",\n    phone: \"\",\n    roomType: \"SIMPLE\",\n    startDate: \"\",\n    endDate: \"\",\n    preferences: \"\"\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [reservations, setReservations] = useState([]);\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const loadReservations = async () => {\n    try {\n      setLoading(true);\n      const data = await reservationService.getReservations();\n      setReservations(data);\n      setError(null);\n      return data;\n    } catch (error) {\n      setError(\"Erreur SOAP lors du chargement\");\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      setLoading(true);\n      await reservationService.createReservation(formData);\n      await loadReservations();\n      setFormData({\n        clientName: \"\",\n        email: \"\",\n        phone: \"\",\n        roomType: \"SIMPLE\",\n        startDate: \"\",\n        endDate: \"\",\n        preferences: \"\"\n      });\n    } catch (error) {\n      setError(\"Erreur SOAP lors de la création\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const deleteReservation = async id => {\n    try {\n      setLoading(true);\n      await reservationService.deleteReservation(id);\n      await loadReservations();\n    } catch (error) {\n      setError(\"Erreur SOAP lors de la suppression\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateReservation = async (id, updatedData) => {\n    try {\n      setLoading(true);\n      await reservationService.updateReservation(id, updatedData);\n      await loadReservations();\n    } catch (error) {\n      setError(\"Erreur SOAP lors de la mise à jour\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getReservationById = async id => {\n    try {\n      setLoading(true);\n      const data = await reservationService.getReservationById(id);\n      setFormData(data);\n      return data;\n    } catch (error) {\n      setError(\"Erreur SOAP lors de la récupération\");\n      return {\n        clientName: \"\",\n        email: \"\",\n        phone: \"\",\n        roomType: \"SIMPLE\",\n        startDate: \"\",\n        endDate: \"\",\n        preferences: \"\"\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    formData,\n    setFormData,\n    handleInputChange,\n    handleSubmit,\n    loading,\n    error,\n    reservations,\n    loadReservations,\n    deleteReservation,\n    updateReservation,\n    getReservationById\n  };\n};\n_s(useReservation, \"VPcuPAn/7jMtWn6PTe8BPUsuXks=\");","map":{"version":3,"names":["useState","reservationService","useReservation","_s","formData","setFormData","clientName","email","phone","roomType","startDate","endDate","preferences","loading","setLoading","error","setError","reservations","setReservations","handleInputChange","e","name","value","target","prev","loadReservations","data","getReservations","handleSubmit","preventDefault","createReservation","deleteReservation","id","updateReservation","updatedData","getReservationById"],"sources":["/Users/soukaina/Desktop/hotel-reservation-management-soap/frontend-soapt/src/hooks/useReservation.js"],"sourcesContent":["import { useState } from \"react\";\nimport { reservationService } from \"../services/reservationService\";\n\nexport const useReservation = () => {\n  const [formData, setFormData] = useState({\n    clientName: \"\",\n    email: \"\",\n    phone: \"\",\n    roomType: \"SIMPLE\",\n    startDate: \"\",\n    endDate: \"\",\n    preferences: \"\",\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [reservations, setReservations] = useState([]);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const loadReservations = async () => {\n    try {\n      setLoading(true);\n      const data = await reservationService.getReservations();\n      setReservations(data);\n      setError(null);\n      return data;\n    } catch (error) {\n      setError(\"Erreur SOAP lors du chargement\");\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      setLoading(true);\n      await reservationService.createReservation(formData);\n      await loadReservations();\n      setFormData({\n        clientName: \"\",\n        email: \"\",\n        phone: \"\",\n        roomType: \"SIMPLE\",\n        startDate: \"\",\n        endDate: \"\",\n        preferences: \"\",\n      });\n    } catch (error) {\n      setError(\"Erreur SOAP lors de la création\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const deleteReservation = async (id) => {\n    try {\n      setLoading(true);\n      await reservationService.deleteReservation(id);\n      await loadReservations();\n    } catch (error) {\n      setError(\"Erreur SOAP lors de la suppression\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateReservation = async (id, updatedData) => {\n    try {\n      setLoading(true);\n      await reservationService.updateReservation(id, updatedData);\n      await loadReservations();\n    } catch (error) {\n      setError(\"Erreur SOAP lors de la mise à jour\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getReservationById = async (id) => {\n    try {\n      setLoading(true);\n      const data = await reservationService.getReservationById(id);\n      setFormData(data);\n      return data;\n    } catch (error) {\n      setError(\"Erreur SOAP lors de la récupération\");\n      return {\n        clientName: \"\",\n        email: \"\",\n        phone: \"\",\n        roomType: \"SIMPLE\",\n        startDate: \"\",\n        endDate: \"\",\n        preferences: \"\",\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    formData,\n    setFormData,\n    handleInputChange,\n    handleSubmit,\n    loading,\n    error,\n    reservations,\n    loadReservations,\n    deleteReservation,\n    updateReservation,\n    getReservationById,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}