{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EnvelopedSignature = void 0;\nconst xpath = require(\"xpath\");\nconst isDomNode = require(\"@xmldom/is-dom-node\");\nclass EnvelopedSignature {\n  constructor() {\n    this.includeComments = false;\n    this.includeComments = false;\n  }\n  process(node, options) {\n    if (null == options.signatureNode) {\n      const signature = xpath.select1(\"./*[local-name(.)='Signature' and namespace-uri(.)='http://www.w3.org/2000/09/xmldsig#']\", node);\n      if (isDomNode.isNodeLike(signature) && signature.parentNode) {\n        signature.parentNode.removeChild(signature);\n      }\n      return node;\n    }\n    const signatureNode = options.signatureNode;\n    const expectedSignatureValue = xpath.select1(\".//*[local-name(.)='SignatureValue']/text()\", signatureNode);\n    if (isDomNode.isTextNode(expectedSignatureValue)) {\n      const expectedSignatureValueData = expectedSignatureValue.data;\n      const signatures = xpath.select(\".//*[local-name(.)='Signature' and namespace-uri(.)='http://www.w3.org/2000/09/xmldsig#']\", node);\n      for (const nodeSignature of Array.isArray(signatures) ? signatures : []) {\n        const signatureValue = xpath.select1(\".//*[local-name(.)='SignatureValue']/text()\", nodeSignature);\n        if (isDomNode.isTextNode(signatureValue)) {\n          const signatureValueData = signatureValue.data;\n          if (expectedSignatureValueData === signatureValueData) {\n            if (nodeSignature.parentNode) {\n              nodeSignature.parentNode.removeChild(nodeSignature);\n            }\n          }\n        }\n      }\n    }\n    return node;\n  }\n  getAlgorithmName() {\n    return \"http://www.w3.org/2000/09/xmldsig#enveloped-signature\";\n  }\n}\nexports.EnvelopedSignature = EnvelopedSignature;","map":{"version":3,"names":["xpath","require","isDomNode","EnvelopedSignature","constructor","includeComments","process","node","options","signatureNode","signature","select1","isNodeLike","parentNode","removeChild","expectedSignatureValue","isTextNode","expectedSignatureValueData","data","signatures","select","nodeSignature","Array","isArray","signatureValue","signatureValueData","getAlgorithmName","exports"],"sources":["/Users/soukaina/Desktop/hotel-reservation-management-soap/frontend-soapt/node_modules/xml-crypto/src/enveloped-signature.ts"],"sourcesContent":["import * as xpath from \"xpath\";\nimport * as isDomNode from \"@xmldom/is-dom-node\";\n\nimport type {\n  CanonicalizationOrTransformationAlgorithm,\n  CanonicalizationOrTransformationAlgorithmProcessOptions,\n  CanonicalizationOrTransformAlgorithmType,\n} from \"./types\";\n\nexport class EnvelopedSignature implements CanonicalizationOrTransformationAlgorithm {\n  protected includeComments = false;\n\n  constructor() {\n    this.includeComments = false;\n  }\n\n  process(node: Node, options: CanonicalizationOrTransformationAlgorithmProcessOptions): Node {\n    if (null == options.signatureNode) {\n      const signature = xpath.select1(\n        \"./*[local-name(.)='Signature' and namespace-uri(.)='http://www.w3.org/2000/09/xmldsig#']\",\n        node,\n      );\n      if (isDomNode.isNodeLike(signature) && signature.parentNode) {\n        signature.parentNode.removeChild(signature);\n      }\n      return node;\n    }\n    const signatureNode = options.signatureNode;\n    const expectedSignatureValue = xpath.select1(\n      \".//*[local-name(.)='SignatureValue']/text()\",\n      signatureNode,\n    );\n    if (isDomNode.isTextNode(expectedSignatureValue)) {\n      const expectedSignatureValueData = expectedSignatureValue.data;\n\n      const signatures = xpath.select(\n        \".//*[local-name(.)='Signature' and namespace-uri(.)='http://www.w3.org/2000/09/xmldsig#']\",\n        node,\n      );\n      for (const nodeSignature of Array.isArray(signatures) ? signatures : []) {\n        const signatureValue = xpath.select1(\n          \".//*[local-name(.)='SignatureValue']/text()\",\n          nodeSignature,\n        );\n        if (isDomNode.isTextNode(signatureValue)) {\n          const signatureValueData = signatureValue.data;\n          if (expectedSignatureValueData === signatureValueData) {\n            if (nodeSignature.parentNode) {\n              nodeSignature.parentNode.removeChild(nodeSignature);\n            }\n          }\n        }\n      }\n    }\n    return node;\n  }\n\n  getAlgorithmName(): CanonicalizationOrTransformAlgorithmType {\n    return \"http://www.w3.org/2000/09/xmldsig#enveloped-signature\";\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,KAAA,GAAAC,OAAA;AACA,MAAAC,SAAA,GAAAD,OAAA;AAQA,MAAaE,kBAAkB;EAG7BC,YAAA;IAFU,KAAAC,eAAe,GAAG,KAAK;IAG/B,IAAI,CAACA,eAAe,GAAG,KAAK;EAC9B;EAEAC,OAAOA,CAACC,IAAU,EAAEC,OAAgE;IAClF,IAAI,IAAI,IAAIA,OAAO,CAACC,aAAa,EAAE;MACjC,MAAMC,SAAS,GAAGV,KAAK,CAACW,OAAO,CAC7B,0FAA0F,EAC1FJ,IAAI,CACL;MACD,IAAIL,SAAS,CAACU,UAAU,CAACF,SAAS,CAAC,IAAIA,SAAS,CAACG,UAAU,EAAE;QAC3DH,SAAS,CAACG,UAAU,CAACC,WAAW,CAACJ,SAAS,CAAC;MAC7C;MACA,OAAOH,IAAI;IACb;IACA,MAAME,aAAa,GAAGD,OAAO,CAACC,aAAa;IAC3C,MAAMM,sBAAsB,GAAGf,KAAK,CAACW,OAAO,CAC1C,6CAA6C,EAC7CF,aAAa,CACd;IACD,IAAIP,SAAS,CAACc,UAAU,CAACD,sBAAsB,CAAC,EAAE;MAChD,MAAME,0BAA0B,GAAGF,sBAAsB,CAACG,IAAI;MAE9D,MAAMC,UAAU,GAAGnB,KAAK,CAACoB,MAAM,CAC7B,2FAA2F,EAC3Fb,IAAI,CACL;MACD,KAAK,MAAMc,aAAa,IAAIC,KAAK,CAACC,OAAO,CAACJ,UAAU,CAAC,GAAGA,UAAU,GAAG,EAAE,EAAE;QACvE,MAAMK,cAAc,GAAGxB,KAAK,CAACW,OAAO,CAClC,6CAA6C,EAC7CU,aAAa,CACd;QACD,IAAInB,SAAS,CAACc,UAAU,CAACQ,cAAc,CAAC,EAAE;UACxC,MAAMC,kBAAkB,GAAGD,cAAc,CAACN,IAAI;UAC9C,IAAID,0BAA0B,KAAKQ,kBAAkB,EAAE;YACrD,IAAIJ,aAAa,CAACR,UAAU,EAAE;cAC5BQ,aAAa,CAACR,UAAU,CAACC,WAAW,CAACO,aAAa,CAAC;YACrD;UACF;QACF;MACF;IACF;IACA,OAAOd,IAAI;EACb;EAEAmB,gBAAgBA,CAAA;IACd,OAAO,uDAAuD;EAChE;;AAlDFC,OAAA,CAAAxB,kBAAA,GAAAA,kBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}