{"ast":null,"code":"var _s = $RefreshSig$();\n// useReservation.js\nimport { useState } from \"react\";\nimport { reservationService } from \"../services/reservationService\";\nexport const useReservation = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    clientName: \"\",\n    email: \"\",\n    phone: \"\",\n    roomType: \"simple\",\n    startDate: \"\",\n    endDate: \"\",\n    preferences: \"\",\n    amenities: []\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [reservations, setReservations] = useState([]);\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const loadReservations = async () => {\n    try {\n      setLoading(true);\n      const data = await reservationService.getReservations();\n      setReservations(data || []);\n      setError(null);\n      return data;\n    } catch (error) {\n      setError(\"Erreur lors du chargement des réservations\");\n      console.error(\"Erreur:\", error);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      setLoading(true);\n      await reservationService.createReservation(formData);\n      setFormData({\n        clientName: \"\",\n        email: \"\",\n        phone: \"\",\n        roomType: \"simple\",\n        startDate: \"\",\n        endDate: \"\",\n        preferences: \"\",\n        amenities: []\n      });\n      await loadReservations();\n      setError(null);\n    } catch (error) {\n      setError(\"Erreur lors de la création de la réservation\");\n      console.error(\"Erreur:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const deleteReservation = async id => {\n    try {\n      setLoading(true);\n      await reservationService.deleteReservation(id);\n      await loadReservations();\n      setError(null);\n    } catch (error) {\n      setError(\"Erreur lors de la suppression de la réservation\");\n      console.error(\"Erreur:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateReservation = async (id, updatedData) => {\n    try {\n      setLoading(true);\n      await reservationService.updateReservation(id, updatedData);\n      await loadReservations();\n      setError(null);\n    } catch (error) {\n      setError(\"Erreur lors de la mise à jour de la réservation\");\n      console.error(\"Erreur:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getReservationById = async id => {\n    try {\n      var _data$clientName, _data$email, _data$phone, _data$roomType, _data$startDate, _data$endDate, _data$preferences, _data$amenities;\n      setLoading(true);\n      const data = await reservationService.getReservationById(id);\n      const formattedData = {\n        clientName: (_data$clientName = data === null || data === void 0 ? void 0 : data.clientName) !== null && _data$clientName !== void 0 ? _data$clientName : \"\",\n        email: (_data$email = data === null || data === void 0 ? void 0 : data.email) !== null && _data$email !== void 0 ? _data$email : \"\",\n        phone: (_data$phone = data === null || data === void 0 ? void 0 : data.phone) !== null && _data$phone !== void 0 ? _data$phone : \"\",\n        roomType: (_data$roomType = data === null || data === void 0 ? void 0 : data.roomType) !== null && _data$roomType !== void 0 ? _data$roomType : \"simple\",\n        startDate: (_data$startDate = data === null || data === void 0 ? void 0 : data.startDate) !== null && _data$startDate !== void 0 ? _data$startDate : \"\",\n        endDate: (_data$endDate = data === null || data === void 0 ? void 0 : data.endDate) !== null && _data$endDate !== void 0 ? _data$endDate : \"\",\n        preferences: (_data$preferences = data === null || data === void 0 ? void 0 : data.preferences) !== null && _data$preferences !== void 0 ? _data$preferences : \"\",\n        amenities: (_data$amenities = data === null || data === void 0 ? void 0 : data.amenities) !== null && _data$amenities !== void 0 ? _data$amenities : []\n      };\n      setFormData(formattedData);\n      return formattedData;\n    } catch (error) {\n      setError(\"Erreur lors de la récupération de la réservation\");\n      console.error(\"Erreur:\", error);\n      return {\n        clientName: \"\",\n        email: \"\",\n        phone: \"\",\n        roomType: \"simple\",\n        startDate: \"\",\n        endDate: \"\",\n        preferences: \"\",\n        amenities: []\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    formData,\n    setFormData,\n    handleInputChange,\n    handleSubmit,\n    loading,\n    error,\n    reservations,\n    loadReservations,\n    deleteReservation,\n    updateReservation,\n    getReservationById\n  };\n};\n_s(useReservation, \"UeaKBHaWBn67EoqmSfXDznhtnWw=\");","map":{"version":3,"names":["useState","reservationService","useReservation","_s","formData","setFormData","clientName","email","phone","roomType","startDate","endDate","preferences","amenities","loading","setLoading","error","setError","reservations","setReservations","handleInputChange","e","name","value","target","prev","loadReservations","data","getReservations","console","handleSubmit","preventDefault","createReservation","deleteReservation","id","updateReservation","updatedData","getReservationById","_data$clientName","_data$email","_data$phone","_data$roomType","_data$startDate","_data$endDate","_data$preferences","_data$amenities","formattedData"],"sources":["/Users/soukaina/Desktop/hotel-reservation-management-rest/frontend/src/hooks/useReservation.js"],"sourcesContent":["// useReservation.js\nimport { useState } from \"react\";\nimport { reservationService } from \"../services/reservationService\";\n\nexport const useReservation = () => {\n  const [formData, setFormData] = useState({\n    clientName: \"\",\n    email: \"\",\n    phone: \"\",\n    roomType: \"simple\",\n    startDate: \"\",\n    endDate: \"\",\n    preferences: \"\",\n    amenities: [],\n  });\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [reservations, setReservations] = useState([]);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const loadReservations = async () => {\n    try {\n      setLoading(true);\n      const data = await reservationService.getReservations();\n      setReservations(data || []);\n      setError(null);\n      return data;\n    } catch (error) {\n      setError(\"Erreur lors du chargement des réservations\");\n      console.error(\"Erreur:\", error);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      setLoading(true);\n      await reservationService.createReservation(formData);\n      setFormData({\n        clientName: \"\",\n        email: \"\",\n        phone: \"\",\n        roomType: \"simple\",\n        startDate: \"\",\n        endDate: \"\",\n        preferences: \"\",\n        amenities: [],\n      });\n      await loadReservations();\n      setError(null);\n    } catch (error) {\n      setError(\"Erreur lors de la création de la réservation\");\n      console.error(\"Erreur:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const deleteReservation = async (id) => {\n    try {\n      setLoading(true);\n      await reservationService.deleteReservation(id);\n      await loadReservations();\n      setError(null);\n    } catch (error) {\n      setError(\"Erreur lors de la suppression de la réservation\");\n      console.error(\"Erreur:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateReservation = async (id, updatedData) => {\n    try {\n      setLoading(true);\n      await reservationService.updateReservation(id, updatedData);\n      await loadReservations();\n      setError(null);\n    } catch (error) {\n      setError(\"Erreur lors de la mise à jour de la réservation\");\n      console.error(\"Erreur:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getReservationById = async (id) => {\n    try {\n      setLoading(true);\n      const data = await reservationService.getReservationById(id);\n      const formattedData = {\n        clientName: data?.clientName ?? \"\",\n        email: data?.email ?? \"\",\n        phone: data?.phone ?? \"\",\n        roomType: data?.roomType ?? \"simple\",\n        startDate: data?.startDate ?? \"\",\n        endDate: data?.endDate ?? \"\",\n        preferences: data?.preferences ?? \"\",\n        amenities: data?.amenities ?? [],\n      };\n      setFormData(formattedData);\n      return formattedData;\n    } catch (error) {\n      setError(\"Erreur lors de la récupération de la réservation\");\n      console.error(\"Erreur:\", error);\n      return {\n        clientName: \"\",\n        email: \"\",\n        phone: \"\",\n        roomType: \"simple\",\n        startDate: \"\",\n        endDate: \"\",\n        preferences: \"\",\n        amenities: [],\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    formData,\n    setFormData,\n    handleInputChange,\n    handleSubmit,\n    loading,\n    error,\n    reservations,\n    loadReservations,\n    deleteReservation,\n    updateReservation,\n    getReservationById,\n  };\n};\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,kBAAkB,QAAQ,gCAAgC;AAEnE,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAC;IACvCM,UAAU,EAAE,EAAE;IACdC,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE,QAAQ;IAClBC,SAAS,EAAE,EAAE;IACbC,OAAO,EAAE,EAAE;IACXC,WAAW,EAAE,EAAE;IACfC,SAAS,EAAE;EACb,CAAC,CAAC;EAEF,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACkB,YAAY,EAAEC,eAAe,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMoB,iBAAiB,GAAIC,CAAC,IAAK;IAC/B,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChCnB,WAAW,CAAEoB,IAAI,KAAM;MACrB,GAAGA,IAAI;MACP,CAACH,IAAI,GAAGC;IACV,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMG,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACFX,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMY,IAAI,GAAG,MAAM1B,kBAAkB,CAAC2B,eAAe,CAAC,CAAC;MACvDT,eAAe,CAACQ,IAAI,IAAI,EAAE,CAAC;MAC3BV,QAAQ,CAAC,IAAI,CAAC;MACd,OAAOU,IAAI;IACb,CAAC,CAAC,OAAOX,KAAK,EAAE;MACdC,QAAQ,CAAC,4CAA4C,CAAC;MACtDY,OAAO,CAACb,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MAC/B,OAAO,EAAE;IACX,CAAC,SAAS;MACRD,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMe,YAAY,GAAG,MAAOT,CAAC,IAAK;IAChCA,CAAC,CAACU,cAAc,CAAC,CAAC;IAClB,IAAI;MACFhB,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMd,kBAAkB,CAAC+B,iBAAiB,CAAC5B,QAAQ,CAAC;MACpDC,WAAW,CAAC;QACVC,UAAU,EAAE,EAAE;QACdC,KAAK,EAAE,EAAE;QACTC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE,QAAQ;QAClBC,SAAS,EAAE,EAAE;QACbC,OAAO,EAAE,EAAE;QACXC,WAAW,EAAE,EAAE;QACfC,SAAS,EAAE;MACb,CAAC,CAAC;MACF,MAAMa,gBAAgB,CAAC,CAAC;MACxBT,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdC,QAAQ,CAAC,8CAA8C,CAAC;MACxDY,OAAO,CAACb,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;IACjC,CAAC,SAAS;MACRD,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMkB,iBAAiB,GAAG,MAAOC,EAAE,IAAK;IACtC,IAAI;MACFnB,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMd,kBAAkB,CAACgC,iBAAiB,CAACC,EAAE,CAAC;MAC9C,MAAMR,gBAAgB,CAAC,CAAC;MACxBT,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdC,QAAQ,CAAC,iDAAiD,CAAC;MAC3DY,OAAO,CAACb,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;IACjC,CAAC,SAAS;MACRD,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMoB,iBAAiB,GAAG,MAAAA,CAAOD,EAAE,EAAEE,WAAW,KAAK;IACnD,IAAI;MACFrB,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMd,kBAAkB,CAACkC,iBAAiB,CAACD,EAAE,EAAEE,WAAW,CAAC;MAC3D,MAAMV,gBAAgB,CAAC,CAAC;MACxBT,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdC,QAAQ,CAAC,iDAAiD,CAAC;MAC3DY,OAAO,CAACb,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;IACjC,CAAC,SAAS;MACRD,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMsB,kBAAkB,GAAG,MAAOH,EAAE,IAAK;IACvC,IAAI;MAAA,IAAAI,gBAAA,EAAAC,WAAA,EAAAC,WAAA,EAAAC,cAAA,EAAAC,eAAA,EAAAC,aAAA,EAAAC,iBAAA,EAAAC,eAAA;MACF9B,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMY,IAAI,GAAG,MAAM1B,kBAAkB,CAACoC,kBAAkB,CAACH,EAAE,CAAC;MAC5D,MAAMY,aAAa,GAAG;QACpBxC,UAAU,GAAAgC,gBAAA,GAAEX,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAErB,UAAU,cAAAgC,gBAAA,cAAAA,gBAAA,GAAI,EAAE;QAClC/B,KAAK,GAAAgC,WAAA,GAAEZ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEpB,KAAK,cAAAgC,WAAA,cAAAA,WAAA,GAAI,EAAE;QACxB/B,KAAK,GAAAgC,WAAA,GAAEb,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEnB,KAAK,cAAAgC,WAAA,cAAAA,WAAA,GAAI,EAAE;QACxB/B,QAAQ,GAAAgC,cAAA,GAAEd,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAElB,QAAQ,cAAAgC,cAAA,cAAAA,cAAA,GAAI,QAAQ;QACpC/B,SAAS,GAAAgC,eAAA,GAAEf,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEjB,SAAS,cAAAgC,eAAA,cAAAA,eAAA,GAAI,EAAE;QAChC/B,OAAO,GAAAgC,aAAA,GAAEhB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEhB,OAAO,cAAAgC,aAAA,cAAAA,aAAA,GAAI,EAAE;QAC5B/B,WAAW,GAAAgC,iBAAA,GAAEjB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEf,WAAW,cAAAgC,iBAAA,cAAAA,iBAAA,GAAI,EAAE;QACpC/B,SAAS,GAAAgC,eAAA,GAAElB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEd,SAAS,cAAAgC,eAAA,cAAAA,eAAA,GAAI;MAChC,CAAC;MACDxC,WAAW,CAACyC,aAAa,CAAC;MAC1B,OAAOA,aAAa;IACtB,CAAC,CAAC,OAAO9B,KAAK,EAAE;MACdC,QAAQ,CAAC,kDAAkD,CAAC;MAC5DY,OAAO,CAACb,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MAC/B,OAAO;QACLV,UAAU,EAAE,EAAE;QACdC,KAAK,EAAE,EAAE;QACTC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE,QAAQ;QAClBC,SAAS,EAAE,EAAE;QACbC,OAAO,EAAE,EAAE;QACXC,WAAW,EAAE,EAAE;QACfC,SAAS,EAAE;MACb,CAAC;IACH,CAAC,SAAS;MACRE,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,OAAO;IACLX,QAAQ;IACRC,WAAW;IACXe,iBAAiB;IACjBU,YAAY;IACZhB,OAAO;IACPE,KAAK;IACLE,YAAY;IACZQ,gBAAgB;IAChBO,iBAAiB;IACjBE,iBAAiB;IACjBE;EACF,CAAC;AACH,CAAC;AAAClC,EAAA,CA5IWD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}