{"ast":null,"code":"// services/reservationService.js\nimport axios from \"axios\";\nconst API_URL = \"http://localhost:8080/services/ws\";\nconst SOAP_NAMESPACE = \"http://controller.hotelgestion.example.com/\";\nconst createSoapEnvelope = (method, params) => `\n  <soapenv:Envelope \n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:ser=\"${SOAP_NAMESPACE}\">\n    <soapenv:Header/>\n    <soapenv:Body>\n      <ser:${method}>${params}</ser:${method}>\n    </soapenv:Body>\n  </soapenv:Envelope>\n`;\nexport const reservationService = {\n  async getReservations() {\n    try {\n      const response = await axios.post(API_URL, createSoapEnvelope(\"getAllReservations\", \"\"), {\n        headers: {\n          \"Content-Type\": \"text/xml\",\n          SOAPAction: \"\"\n        }\n      });\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      return this.transformReservations(xmlDoc);\n    } catch (error) {\n      console.error(\"SOAP Error:\", error);\n      throw error;\n    }\n  },\n  async getReservationById(id) {\n    try {\n      const params = `<id>${id}</id>`;\n      const response = await axios.post(API_URL, createSoapEnvelope(\"getReservationById\", params), {\n        headers: {\n          \"Content-Type\": \"text/xml\",\n          SOAPAction: \"\"\n        }\n      });\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      return this.transformReservation(xmlDoc.querySelector(\"return\"));\n    } catch (error) {\n      console.error(\"SOAP Error:\", error);\n      throw error;\n    }\n  },\n  async createReservation(formData) {\n    try {\n      const [firstName, ...lastNameParts] = formData.clientName.split(\" \");\n      const params = `\n        <arg0>\n          <client>\n            <nom>${lastNameParts.join(\" \")}</nom>\n            <prenom>${firstName}</prenom>\n            <email>${formData.email}</email>\n            <telephone>${formData.phone}</telephone>\n          </client>\n          <chambre>\n            <type>${formData.roomType}</type>\n            <disponible>true</disponible>\n          </chambre>\n          <dateDebut>${formData.startDate}</dateDebut>\n          <dateFin>${formData.endDate}</dateFin>\n          <preferences>${formData.preferences || \"\"}</preferences>\n        </arg0>\n      `;\n      const response = await axios.post(API_URL, createSoapEnvelope(\"createReservation\", params), {\n        headers: {\n          \"Content-Type\": \"text/xml\",\n          SOAPAction: \"\"\n        }\n      });\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      return this.transformReservation(xmlDoc.querySelector(\"return\"));\n    } catch (error) {\n      console.error(\"SOAP Error:\", error);\n      throw error;\n    }\n  },\n  async deleteReservation(id) {\n    try {\n      const params = `<id>${id}</id>`;\n      const response = await axios.post(API_URL, createSoapEnvelope(\"deleteReservation\", params), {\n        headers: {\n          \"Content-Type\": \"text/xml\",\n          SOAPAction: \"\"\n        }\n      });\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      return xmlDoc.querySelector(\"return\").textContent === \"true\";\n    } catch (error) {\n      console.error(\"SOAP Error:\", error);\n      throw error;\n    }\n  },\n  transformReservation(node) {\n    if (!node) return null;\n    const getNodeValue = path => {\n      const element = node.querySelector(path);\n      return element ? element.textContent : \"\";\n    };\n    return {\n      id: getNodeValue(\"id\"),\n      clientName: `${getNodeValue(\"client/prenom\")} ${getNodeValue(\"client/nom\")}`.trim(),\n      email: getNodeValue(\"client/email\"),\n      phone: getNodeValue(\"client/telephone\"),\n      roomType: getNodeValue(\"chambre/type\"),\n      startDate: getNodeValue(\"dateDebut\"),\n      endDate: getNodeValue(\"dateFin\"),\n      preferences: getNodeValue(\"preferences\")\n    };\n  },\n  transformReservations(xmlDoc) {\n    const reservations = xmlDoc.querySelectorAll(\"return\");\n    return Array.from(reservations).map(res => this.transformReservation(res)).filter(res => res !== null);\n  }\n};","map":{"version":3,"names":["axios","API_URL","SOAP_NAMESPACE","createSoapEnvelope","method","params","reservationService","getReservations","response","post","headers","SOAPAction","parser","DOMParser","xmlDoc","parseFromString","data","transformReservations","error","console","getReservationById","id","transformReservation","querySelector","createReservation","formData","firstName","lastNameParts","clientName","split","join","email","phone","roomType","startDate","endDate","preferences","deleteReservation","textContent","node","getNodeValue","path","element","trim","reservations","querySelectorAll","Array","from","map","res","filter"],"sources":["/Users/soukaina/Desktop/hotel-reservation-management-soap/frontend-soapt/src/services/reservationService.js"],"sourcesContent":["// services/reservationService.js\nimport axios from \"axios\";\n\nconst API_URL = \"http://localhost:8080/services/ws\";\nconst SOAP_NAMESPACE = \"http://controller.hotelgestion.example.com/\";\n\nconst createSoapEnvelope = (method, params) => `\n  <soapenv:Envelope \n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:ser=\"${SOAP_NAMESPACE}\">\n    <soapenv:Header/>\n    <soapenv:Body>\n      <ser:${method}>${params}</ser:${method}>\n    </soapenv:Body>\n  </soapenv:Envelope>\n`;\n\nexport const reservationService = {\n  async getReservations() {\n    try {\n      const response = await axios.post(\n        API_URL,\n        createSoapEnvelope(\"getAllReservations\", \"\"),\n        {\n          headers: {\n            \"Content-Type\": \"text/xml\",\n            SOAPAction: \"\",\n          },\n        }\n      );\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      return this.transformReservations(xmlDoc);\n    } catch (error) {\n      console.error(\"SOAP Error:\", error);\n      throw error;\n    }\n  },\n\n  async getReservationById(id) {\n    try {\n      const params = `<id>${id}</id>`;\n      const response = await axios.post(\n        API_URL,\n        createSoapEnvelope(\"getReservationById\", params),\n        {\n          headers: {\n            \"Content-Type\": \"text/xml\",\n            SOAPAction: \"\",\n          },\n        }\n      );\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      return this.transformReservation(xmlDoc.querySelector(\"return\"));\n    } catch (error) {\n      console.error(\"SOAP Error:\", error);\n      throw error;\n    }\n  },\n\n  async createReservation(formData) {\n    try {\n      const [firstName, ...lastNameParts] = formData.clientName.split(\" \");\n      const params = `\n        <arg0>\n          <client>\n            <nom>${lastNameParts.join(\" \")}</nom>\n            <prenom>${firstName}</prenom>\n            <email>${formData.email}</email>\n            <telephone>${formData.phone}</telephone>\n          </client>\n          <chambre>\n            <type>${formData.roomType}</type>\n            <disponible>true</disponible>\n          </chambre>\n          <dateDebut>${formData.startDate}</dateDebut>\n          <dateFin>${formData.endDate}</dateFin>\n          <preferences>${formData.preferences || \"\"}</preferences>\n        </arg0>\n      `;\n\n      const response = await axios.post(\n        API_URL,\n        createSoapEnvelope(\"createReservation\", params),\n        {\n          headers: {\n            \"Content-Type\": \"text/xml\",\n            SOAPAction: \"\",\n          },\n        }\n      );\n\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      return this.transformReservation(xmlDoc.querySelector(\"return\"));\n    } catch (error) {\n      console.error(\"SOAP Error:\", error);\n      throw error;\n    }\n  },\n\n  async deleteReservation(id) {\n    try {\n      const params = `<id>${id}</id>`;\n      const response = await axios.post(\n        API_URL,\n        createSoapEnvelope(\"deleteReservation\", params),\n        {\n          headers: {\n            \"Content-Type\": \"text/xml\",\n            SOAPAction: \"\",\n          },\n        }\n      );\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      return xmlDoc.querySelector(\"return\").textContent === \"true\";\n    } catch (error) {\n      console.error(\"SOAP Error:\", error);\n      throw error;\n    }\n  },\n\n  transformReservation(node) {\n    if (!node) return null;\n\n    const getNodeValue = (path) => {\n      const element = node.querySelector(path);\n      return element ? element.textContent : \"\";\n    };\n\n    return {\n      id: getNodeValue(\"id\"),\n      clientName: `${getNodeValue(\"client/prenom\")} ${getNodeValue(\n        \"client/nom\"\n      )}`.trim(),\n      email: getNodeValue(\"client/email\"),\n      phone: getNodeValue(\"client/telephone\"),\n      roomType: getNodeValue(\"chambre/type\"),\n      startDate: getNodeValue(\"dateDebut\"),\n      endDate: getNodeValue(\"dateFin\"),\n      preferences: getNodeValue(\"preferences\"),\n    };\n  },\n\n  transformReservations(xmlDoc) {\n    const reservations = xmlDoc.querySelectorAll(\"return\");\n    return Array.from(reservations)\n      .map((res) => this.transformReservation(res))\n      .filter((res) => res !== null);\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}