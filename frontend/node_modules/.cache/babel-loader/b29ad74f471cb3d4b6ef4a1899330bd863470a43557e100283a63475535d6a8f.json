{"ast":null,"code":"// services/reservationService.js\nimport axios from \"axios\";\nconst API_URL = \"http://localhost:8080/services/ws\";\nconst createSoapEnvelope = (method, params) => `\n  <soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" \n                    xmlns:hot=\"http://controller.hotelgestion.example.com/\">\n    <soapenv:Header/>\n    <soapenv:Body>\n      <hot:${method}>${params}</hot:${method}>\n    </soapenv:Body>\n  </soapenv:Envelope>\n`;\nexport const reservationService = {\n  async getReservations() {\n    const response = await axios.post(API_URL, createSoapEnvelope(\"getAllReservations\", \"\"), {\n      headers: {\n        \"Content-Type\": \"text/xml\"\n      }\n    });\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n    return this.transformReservations(xmlDoc);\n  },\n  async createReservation(formData) {\n    const [firstName, ...lastNameParts] = formData.clientName.split(\" \");\n    const params = `\n      <dateDebut>${formData.startDate}</dateDebut>\n      <dateFin>${formData.endDate}</dateFin>\n      <client>\n        <nom>${lastNameParts.join(\" \")}</nom>\n        <prenom>${firstName}</prenom>\n        <email>${formData.email}</email>\n        <telephone>${formData.phone}</telephone>\n      </client>\n      <chambre>\n        <type>${formData.roomType}</type>\n        <disponible>true</disponible>\n      </chambre>\n    `;\n    const response = await axios.post(API_URL, createSoapEnvelope(\"createReservation\", params), {\n      headers: {\n        \"Content-Type\": \"text/xml\"\n      }\n    });\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n    return this.transformReservation(xmlDoc);\n  },\n  transformReservation(xmlDoc) {\n    const getNodeValue = (node, path) => {\n      const element = node.querySelector(path);\n      return element ? element.textContent : \"\";\n    };\n    return {\n      id: getNodeValue(xmlDoc, \"id\"),\n      clientName: `${getNodeValue(xmlDoc, \"prenom\")} ${getNodeValue(xmlDoc, \"nom\")}`.trim(),\n      email: getNodeValue(xmlDoc, \"email\"),\n      phone: getNodeValue(xmlDoc, \"telephone\"),\n      roomType: getNodeValue(xmlDoc, \"type\"),\n      startDate: getNodeValue(xmlDoc, \"dateDebut\"),\n      endDate: getNodeValue(xmlDoc, \"dateFin\")\n    };\n  },\n  transformReservations(xmlDoc) {\n    const reservations = xmlDoc.querySelectorAll(\"return\");\n    return Array.from(reservations).map(res => this.transformReservation(res));\n  }\n};","map":{"version":3,"names":["axios","API_URL","createSoapEnvelope","method","params","reservationService","getReservations","response","post","headers","parser","DOMParser","xmlDoc","parseFromString","data","transformReservations","createReservation","formData","firstName","lastNameParts","clientName","split","startDate","endDate","join","email","phone","roomType","transformReservation","getNodeValue","node","path","element","querySelector","textContent","id","trim","reservations","querySelectorAll","Array","from","map","res"],"sources":["/Users/soukaina/Desktop/hotel-reservation-management-soap/frontend-soapt/src/services/reservationService.js"],"sourcesContent":["// services/reservationService.js\nimport axios from \"axios\";\n\nconst API_URL = \"http://localhost:8080/services/ws\";\n\nconst createSoapEnvelope = (method, params) => `\n  <soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" \n                    xmlns:hot=\"http://controller.hotelgestion.example.com/\">\n    <soapenv:Header/>\n    <soapenv:Body>\n      <hot:${method}>${params}</hot:${method}>\n    </soapenv:Body>\n  </soapenv:Envelope>\n`;\n\nexport const reservationService = {\n  async getReservations() {\n    const response = await axios.post(\n      API_URL,\n      createSoapEnvelope(\"getAllReservations\", \"\"),\n      { headers: { \"Content-Type\": \"text/xml\" } }\n    );\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n    return this.transformReservations(xmlDoc);\n  },\n\n  async createReservation(formData) {\n    const [firstName, ...lastNameParts] = formData.clientName.split(\" \");\n    const params = `\n      <dateDebut>${formData.startDate}</dateDebut>\n      <dateFin>${formData.endDate}</dateFin>\n      <client>\n        <nom>${lastNameParts.join(\" \")}</nom>\n        <prenom>${firstName}</prenom>\n        <email>${formData.email}</email>\n        <telephone>${formData.phone}</telephone>\n      </client>\n      <chambre>\n        <type>${formData.roomType}</type>\n        <disponible>true</disponible>\n      </chambre>\n    `;\n    const response = await axios.post(\n      API_URL,\n      createSoapEnvelope(\"createReservation\", params),\n      { headers: { \"Content-Type\": \"text/xml\" } }\n    );\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n    return this.transformReservation(xmlDoc);\n  },\n\n  transformReservation(xmlDoc) {\n    const getNodeValue = (node, path) => {\n      const element = node.querySelector(path);\n      return element ? element.textContent : \"\";\n    };\n\n    return {\n      id: getNodeValue(xmlDoc, \"id\"),\n      clientName: `${getNodeValue(xmlDoc, \"prenom\")} ${getNodeValue(\n        xmlDoc,\n        \"nom\"\n      )}`.trim(),\n      email: getNodeValue(xmlDoc, \"email\"),\n      phone: getNodeValue(xmlDoc, \"telephone\"),\n      roomType: getNodeValue(xmlDoc, \"type\"),\n      startDate: getNodeValue(xmlDoc, \"dateDebut\"),\n      endDate: getNodeValue(xmlDoc, \"dateFin\"),\n    };\n  },\n\n  transformReservations(xmlDoc) {\n    const reservations = xmlDoc.querySelectorAll(\"return\");\n    return Array.from(reservations).map((res) =>\n      this.transformReservation(res)\n    );\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}