{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:8080/services/ws\";\nconst createSoapEnvelope = (method, params) => `\n  <soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" \n                    xmlns:hot=\"http://controller.hotelgestion.example.com/\">\n    <soapenv:Header/>\n    <soapenv:Body>\n      <hot:${method}>${params}</hot:${method}>\n    </soapenv:Body>\n  </soapenv:Envelope>\n`;\nexport const reservationService = {\n  async getReservations() {\n    try {\n      const response = await axios.post(API_URL, createSoapEnvelope(\"getAllReservations\", \"\"), {\n        headers: {\n          \"Content-Type\": \"text/xml\"\n        }\n      });\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      return this.transformReservations(xmlDoc);\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération des réservations:\", error);\n      throw error;\n    }\n  },\n  async getReservationById(id) {\n    try {\n      const params = `<arg0>${id}</arg0>`;\n      const response = await axios.post(API_URL, createSoapEnvelope(\"getReservationById\", params), {\n        headers: {\n          \"Content-Type\": \"text/xml\"\n        }\n      });\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      return this.transformReservation(xmlDoc.querySelector(\"return\"));\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération de la réservation:\", error);\n      throw error;\n    }\n  },\n  async createReservation(formData) {\n    try {\n      const [firstName, ...lastNameParts] = formData.clientName.split(\" \");\n      const params = `\n        <dateDebut>${formData.startDate}</dateDebut>\n        <dateFin>${formData.endDate}</dateFin>\n        <client>\n          <nom>${lastNameParts.join(\" \")}</nom>\n          <prenom>${firstName}</prenom>\n          <email>${formData.email}</email>\n          <telephone>${formData.phone}</telephone>\n        </client>\n        <chambre>\n          <type>${formData.roomType}</type>\n          <disponible>true</disponible>\n        </chambre>\n      `;\n      const response = await axios.post(API_URL, createSoapEnvelope(\"createReservation\", params), {\n        headers: {\n          \"Content-Type\": \"text/xml\"\n        }\n      });\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      return this.transformReservation(xmlDoc);\n    } catch (error) {\n      console.error(\"Erreur lors de la création de la réservation:\", error);\n      throw error;\n    }\n  },\n  async updateReservation(id, formData) {\n    try {\n      const [firstName, ...lastNameParts] = formData.clientName.split(\" \");\n      const params = `\n        <arg0>${id}</arg0>\n        <arg1>${formData.startDate}</arg1>\n        <arg2>${formData.endDate}</arg2>\n        <arg3>\n          <nom>${lastNameParts.join(\" \")}</nom>\n          <prenom>${firstName}</prenom>\n          <email>${formData.email}</email>\n          <telephone>${formData.phone}</telephone>\n        </arg3>\n        <arg4>\n          <type>${formData.roomType}</type>\n          <disponible>true</disponible>\n        </arg4>\n      `;\n      const response = await axios.post(API_URL, createSoapEnvelope(\"updateReservation\", params), {\n        headers: {\n          \"Content-Type\": \"text/xml\"\n        }\n      });\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      return xmlDoc.querySelector(\"return\").textContent === \"true\";\n    } catch (error) {\n      console.error(\"Erreur lors de la mise à jour de la réservation:\", error);\n      throw error;\n    }\n  },\n  async deleteReservation(id) {\n    try {\n      const params = `<arg0>${id}</arg0>`;\n      const response = await axios.post(API_URL, createSoapEnvelope(\"deleteReservation\", params), {\n        headers: {\n          \"Content-Type\": \"text/xml\"\n        }\n      });\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      return xmlDoc.querySelector(\"return\").textContent === \"true\";\n    } catch (error) {\n      console.error(\"Erreur lors de la suppression de la réservation:\", error);\n      throw error;\n    }\n  },\n  transformReservation(xmlDoc) {\n    const getNodeValue = (node, path) => {\n      const element = node.querySelector(path);\n      return element ? element.textContent : \"\";\n    };\n    return {\n      id: getNodeValue(xmlDoc, \"id\"),\n      clientName: `${getNodeValue(xmlDoc, \"prenom\")} ${getNodeValue(xmlDoc, \"nom\")}`.trim(),\n      email: getNodeValue(xmlDoc, \"email\"),\n      phone: getNodeValue(xmlDoc, \"telephone\"),\n      roomType: getNodeValue(xmlDoc, \"type\"),\n      startDate: getNodeValue(xmlDoc, \"dateDebut\"),\n      endDate: getNodeValue(xmlDoc, \"dateFin\")\n    };\n  },\n  transformReservations(xmlDoc) {\n    const reservations = xmlDoc.querySelectorAll(\"return\");\n    return Array.from(reservations).map(res => this.transformReservation(res));\n  }\n};","map":{"version":3,"names":["axios","API_URL","createSoapEnvelope","method","params","reservationService","getReservations","response","post","headers","parser","DOMParser","xmlDoc","parseFromString","data","transformReservations","error","console","getReservationById","id","transformReservation","querySelector","createReservation","formData","firstName","lastNameParts","clientName","split","startDate","endDate","join","email","phone","roomType","updateReservation","textContent","deleteReservation","getNodeValue","node","path","element","trim","reservations","querySelectorAll","Array","from","map","res"],"sources":["/Users/soukaina/Desktop/hotel-reservation-management-soap/frontend-soapt/src/services/reservationService.js"],"sourcesContent":["import axios from \"axios\";\n\nconst API_URL = \"http://localhost:8080/services/ws\";\n\nconst createSoapEnvelope = (method, params) => `\n  <soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" \n                    xmlns:hot=\"http://controller.hotelgestion.example.com/\">\n    <soapenv:Header/>\n    <soapenv:Body>\n      <hot:${method}>${params}</hot:${method}>\n    </soapenv:Body>\n  </soapenv:Envelope>\n`;\n\nexport const reservationService = {\n  async getReservations() {\n    try {\n      const response = await axios.post(\n        API_URL,\n        createSoapEnvelope(\"getAllReservations\", \"\"),\n        { headers: { \"Content-Type\": \"text/xml\" } }\n      );\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      return this.transformReservations(xmlDoc);\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération des réservations:\", error);\n      throw error;\n    }\n  },\n\n  async getReservationById(id) {\n    try {\n      const params = `<arg0>${id}</arg0>`;\n      const response = await axios.post(\n        API_URL,\n        createSoapEnvelope(\"getReservationById\", params),\n        { headers: { \"Content-Type\": \"text/xml\" } }\n      );\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      return this.transformReservation(xmlDoc.querySelector(\"return\"));\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération de la réservation:\", error);\n      throw error;\n    }\n  },\n\n  async createReservation(formData) {\n    try {\n      const [firstName, ...lastNameParts] = formData.clientName.split(\" \");\n      const params = `\n        <dateDebut>${formData.startDate}</dateDebut>\n        <dateFin>${formData.endDate}</dateFin>\n        <client>\n          <nom>${lastNameParts.join(\" \")}</nom>\n          <prenom>${firstName}</prenom>\n          <email>${formData.email}</email>\n          <telephone>${formData.phone}</telephone>\n        </client>\n        <chambre>\n          <type>${formData.roomType}</type>\n          <disponible>true</disponible>\n        </chambre>\n      `;\n\n      const response = await axios.post(\n        API_URL,\n        createSoapEnvelope(\"createReservation\", params),\n        { headers: { \"Content-Type\": \"text/xml\" } }\n      );\n\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      return this.transformReservation(xmlDoc);\n    } catch (error) {\n      console.error(\"Erreur lors de la création de la réservation:\", error);\n      throw error;\n    }\n  },\n\n  async updateReservation(id, formData) {\n    try {\n      const [firstName, ...lastNameParts] = formData.clientName.split(\" \");\n      const params = `\n        <arg0>${id}</arg0>\n        <arg1>${formData.startDate}</arg1>\n        <arg2>${formData.endDate}</arg2>\n        <arg3>\n          <nom>${lastNameParts.join(\" \")}</nom>\n          <prenom>${firstName}</prenom>\n          <email>${formData.email}</email>\n          <telephone>${formData.phone}</telephone>\n        </arg3>\n        <arg4>\n          <type>${formData.roomType}</type>\n          <disponible>true</disponible>\n        </arg4>\n      `;\n\n      const response = await axios.post(\n        API_URL,\n        createSoapEnvelope(\"updateReservation\", params),\n        { headers: { \"Content-Type\": \"text/xml\" } }\n      );\n\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      return xmlDoc.querySelector(\"return\").textContent === \"true\";\n    } catch (error) {\n      console.error(\"Erreur lors de la mise à jour de la réservation:\", error);\n      throw error;\n    }\n  },\n\n  async deleteReservation(id) {\n    try {\n      const params = `<arg0>${id}</arg0>`;\n      const response = await axios.post(\n        API_URL,\n        createSoapEnvelope(\"deleteReservation\", params),\n        { headers: { \"Content-Type\": \"text/xml\" } }\n      );\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      return xmlDoc.querySelector(\"return\").textContent === \"true\";\n    } catch (error) {\n      console.error(\"Erreur lors de la suppression de la réservation:\", error);\n      throw error;\n    }\n  },\n\n  transformReservation(xmlDoc) {\n    const getNodeValue = (node, path) => {\n      const element = node.querySelector(path);\n      return element ? element.textContent : \"\";\n    };\n\n    return {\n      id: getNodeValue(xmlDoc, \"id\"),\n      clientName: `${getNodeValue(xmlDoc, \"prenom\")} ${getNodeValue(\n        xmlDoc,\n        \"nom\"\n      )}`.trim(),\n      email: getNodeValue(xmlDoc, \"email\"),\n      phone: getNodeValue(xmlDoc, \"telephone\"),\n      roomType: getNodeValue(xmlDoc, \"type\"),\n      startDate: getNodeValue(xmlDoc, \"dateDebut\"),\n      endDate: getNodeValue(xmlDoc, \"dateFin\"),\n    };\n  },\n\n  transformReservations(xmlDoc) {\n    const reservations = xmlDoc.querySelectorAll(\"return\");\n    return Array.from(reservations).map((res) =>\n      this.transformReservation(res)\n    );\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}